//
// PSMoveProtocol.proto: protobuf definition file for the PSMove Service Protocol
//
// Brendan Walker (brendan@millerwalker.net)
//
syntax = "proto3";
package PSMoveProtocol;

enum ControllerType {
    PSMOVE= 0;
    PSNAVI= 1;
}

message Position {
    float x = 1;
    float y = 2;
    float z = 3;
}

message FloatVector {
    float i = 1;
    float j = 2;
    float k = 3;
}

message IntVector {
    int32 i = 1;
    int32 j = 2;
    int32 k = 3;
}

message Orientation{
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4;
}

enum TrackerType {
    PS3EYE = 0;
}

enum TrackerDriver {
    LIBUSB = 0;
    CL_EYE = 1;
    CL_EYE_MULTICAM = 2;
    GENERIC_WEBCAM = 3;
}

// Reliable (TCP) requests that can issued to the PSMove Service
message Request {
    // Unique id for this request.
    // Used to keep track of which response is associated with which request
    // when multiple requests are in-flight.
    int32 request_id = 1;

    // The request type determines which of the request structures is actually used
    enum RequestType {
        GET_CONTROLLER_LIST = 0;
        START_CONTROLLER_DATA_STREAM = 1;
        STOP_CONTROLLER_DATA_STREAM = 2;
        SET_RUMBLE = 3;
        RESET_POSE = 4;
        UNPAIR_CONTROLLER= 5;
        PAIR_CONTROLLER= 6;
        CANCEL_BLUETOOTH_REQUEST= 7;
        SET_LED_COLOR= 8;
        SET_MAGNETOMETER_CALIBRATION= 9;
        GET_TRACKER_LIST = 10;
        START_TRACKER_DATA_STREAM = 11;
        STOP_TRACKER_DATA_STREAM = 12;
    }
    RequestType type = 2;
   
    // Parameters for START_CONTROLLER_DATA_STREAM
    // NOTE: ControllerDataFrame packets will start streaming to client upon receiving this request
    message RequestStartPSMoveDataStream {
        int32 controller_id = 1;
        bool include_raw_sensor_data= 2;
    }
    RequestStartPSMoveDataStream request_start_psmove_data_stream = 20;

    // Parameters for STOP_PSMOVE_DATA_STREAM
    // NOTE: ControllerDataFrame packets will stop streaming to client upon receiving this request
    message RequestStopPSMoveDataStream {
        int32 controller_id = 1;
    }
    RequestStopPSMoveDataStream request_stop_psmove_data_stream = 21;

    // Parameters for SET_RUMBLE
    message RequestSetRumble {
        int32 controller_id = 1;
        int32 rumble = 2; // [0,255]
    }
    RequestSetRumble request_rumble = 22;

    // Parameters for RESET_POSE
    message RequestResetPose {
        int32 controller_id = 1;
    }
    RequestResetPose reset_pose = 23;   
    
    // Parameters for UNPAIR_CONTROLLER
    message RequestUnpairController {
        int32 controller_id = 1;
    }
    RequestUnpairController unpair_controller = 24;

    // Parameters for PAIR_CONTROLLER
    message RequestPairController {
        int32 controller_id = 1;
    }
    RequestPairController pair_controller = 25;

    // Parameters for CANCEL_BLUETOOTH_REQUEST
    message RequestCancelBluetoothRequest {
        int32 controller_id = 1;
    }
    RequestCancelBluetoothRequest cancel_bluetooth_request = 26;    
    
    // Parameters for SET_LED_COLOR
    message RequestSetLEDColor {
        int32 controller_id = 1;
        int32 r = 2;
        int32 g = 3;
        int32 b = 4;
    }
    RequestSetLEDColor set_led_color_request = 27;        
    
    // Parameters for SET_MAGNETOMETER_CALIBRATION
    message RequestSetMagnetometerCalibration {
        int32 controller_id = 1;
        FloatVector ellipse_center= 2;
        FloatVector ellipse_extents= 3;
        FloatVector ellipse_basis_x= 4;
        FloatVector ellipse_basis_y= 5;
        FloatVector ellipse_basis_z= 6;
        float ellipse_fit_error= 7;
        FloatVector magnetometer_identity= 8;
    }
    RequestSetMagnetometerCalibration set_magnetometer_calibration_request = 28;

    // Parameters for START_TRACKER_DATA_STREAM
    // NOTE: TrackerDataFrame packets will start streaming to client upon receiving this request
    message RequestStartTrackerDataStream {
        int32 tracker_id = 1;
    }
    RequestStartTrackerDataStream request_start_tracker_data_stream = 29;

    // Parameters for STOP_TRACKER_DATA_STREAM
    // NOTE: TrackerDataFrame packets will stop streaming to client upon receiving this request
    message RequestStopTrackerDataStream {
        int32 tracker_id = 1;
    }
    RequestStopTrackerDataStream request_stop_tracker_data_stream = 30;
}

// Reliable (TCP) responses to requests
message Response {
    // The response type
    enum ResponseType {
        GENERAL_RESULT= 0;
        CONNECTION_INFO= 1;
        CONTROLLER_LIST= 2;
        CONTROLLER_LIST_UPDATED= 3;        
        UNPAIR_REQUEST_COMPLETED= 4;
        PAIR_REQUEST_COMPLETED= 5;
        BLUETOOTH_REQUEST_PROGRESS= 6;
        TRACKER_LIST= 7;
        TRACKER_LIST_UPDATED= 8;
        HMD_LIST= 9;
        HMD_LIST_UPDATED= 10;        
    }

    enum ResultCode {
        RESULT_OK= 0;
        RESULT_ERROR= 1;
        RESULT_CANCELED= 2;
    }

    ResponseType type = 1;
    int32 request_id = 2; // the request id that spawned this response, -1 if this is a notification
    ResultCode result_code = 3;
    
    // No Parameters for GENERAL_RESULT
    
    // Parameters for CONNECTION_INFO
    // This is returned automatically when connecting via TCP
    message ResultConnectionInfo {
        int32 tcp_connection_id = 1;
    }
    ResultConnectionInfo result_connection_info = 20;
    
    // Parameters for CONTROLLER_LIST
    // This is returned in response to a CONTROLLER_LIST request
    message ResultControllerList {
        message ControllerInfo {
            int32 controller_id= 1;
            enum ConnectionType {
                USB = 0;
                BLUETOOTH = 1;
            }
            ConnectionType connection_type = 2;
            ControllerType controller_type = 3;
            string device_path = 4;
            string device_serial = 5;
            string host_serial = 6;
        }
        repeated ControllerInfo controllers = 1;
    }
    ResultControllerList result_controller_list = 21;    
    
    // No parameters for CONTROLLER_LIST_UPDATED
    // No parameters for UNPAIR_REQUEST_COMPLETED
    // No parameters for PAIR_REQUEST_COMPLETED
    
    // Parameters for BLUETOOTH_REQUEST_PROGRESS
    message ResultBluetoothRequestProgress {
        int32 controller_id = 1;
        int32 steps_completed = 2;
        int32 total_steps = 3;
    }
    ResultBluetoothRequestProgress result_bluetooth_request_progress = 22;


    // Parameters for TRACKER_LIST
    // This is returned in response to a TRACKER_LIST request
    message ResultTrackerList {
        message TrackerInfo {
            int32 tracker_id= 1;
            TrackerType tracker_type = 2;
            TrackerDriver tracker_driver = 3;
            string device_path = 4;
        }
        repeated TrackerInfo trackers = 1;
    }
    ResultTrackerList result_tracker_list = 23;
}

// Unreliable (UDP) controller data packet format
message ControllerDataFrame
{
    // Button Index Bits
    enum ButtonType {
        TRIANGLE= 0;
        CIRCLE= 1;
        CROSS= 2;
        SQUARE= 3;
        SELECT= 4;
        START= 5;
        PS= 6;
        MOVE= 7;
        TRIGGER= 8;
        UP= 9;
        DOWN= 10;
        LEFT= 11;
        RIGHT= 12;
        L1= 13;
        L2= 14;
        L3= 15;
        R1= 16;
        R2= 17;
        R3= 18;        
    }
    
    // The id of controller this data is for
    int32 controller_id= 1;

    // Specify the type of controller this data is from
    ControllerType controller_type= 2;
    
    // Monotonically increasing number.
    // Used to throw out old data if it arrives out of order.
    int32 sequence_num= 3;

    // Common Controller status flags
    bool IsConnected= 4;
    
    // Raw bitmask of which buttons are currently down
    // Buttons bits are indexed using the ButtonType enum
    uint32 button_down_bitmask = 5;    
    
    // PSMove Specific Controller state
    message PSMoveState
    {   
        // PSMove Specific flags
        bool ValidHardwareCalibration= 1;
        bool IsTrackingEnabled= 2;
        bool IsCurrentlyTracking= 3;

        // Tracking position in the space of the HMD tracking camera
        Position position = 4;

        // Tracking orientation in the frame of the local magnetic field
        Orientation orientation = 5;

        // Trigger analog value [0,255]
        int32 trigger_value = 6;
        
        // Only valid if include_raw_sensor_data=true in START_CONTROLLER_DATA_STREAM request
        message RawSensorData
        {
            IntVector magnetometer= 1;
            FloatVector accelerometer= 2;
            FloatVector gyroscope= 3;
        }
        RawSensorData raw_sensor_data = 7;
    }
    PSMoveState psmove_state = 6;
    
    // PSMove Specific Controller state
    message PSNaviState
    {
        // Trigger analog value [0,255]
        int32 trigger_value = 1;
        
        // The x-axis stick value, [0,255], Subtract 0x80 to obtain signed values
        int32 stick_xaxis = 2;
        
        // The y-axis stick value, [0,255], Subtract 0x80 to obtain signed values
        int32 stick_yaxis = 3;        
    }
    PSNaviState psnavi_state = 7;    
}

// Unreliable (UDP) tracker data packet format
message TrackerDataFrame
{
    // The id of tracker this data is for
    int32 tracker_id= 1;

    // Specify the type of controller this data is from
    TrackerType tracker_type= 2;
}
