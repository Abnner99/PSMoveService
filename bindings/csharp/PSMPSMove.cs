//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PSMoveService {

public class PSMPSMove : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PSMPSMove(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PSMPSMove obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PSMPSMove() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PSMoveClientPINVOKE.delete_PSMPSMove(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool bHasValidHardwareCalibration {
    get {
      bool ret = PSMoveClientPINVOKE.PSMPSMove_bHasValidHardwareCalibration_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsTrackingEnabled {
    get {
      bool ret = PSMoveClientPINVOKE.PSMPSMove_bIsTrackingEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsCurrentlyTracking {
    get {
      bool ret = PSMoveClientPINVOKE.PSMPSMove_bIsCurrentlyTracking_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsOrientationValid {
    get {
      bool ret = PSMoveClientPINVOKE.PSMPSMove_bIsOrientationValid_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsPositionValid {
    get {
      bool ret = PSMoveClientPINVOKE.PSMPSMove_bIsPositionValid_get(swigCPtr);
      return ret;
    } 
  }

  public bool bHasUnpublishedState {
    get {
      bool ret = PSMoveClientPINVOKE.PSMPSMove_bHasUnpublishedState_get(swigCPtr);
      return ret;
    } 
  }

  public string DevicePath {
    get {
      string ret = PSMoveClientPINVOKE.PSMPSMove_DevicePath_get(swigCPtr);
      return ret;
    } 
  }

  public string DeviceSerial {
    get {
      string ret = PSMoveClientPINVOKE.PSMPSMove_DeviceSerial_get(swigCPtr);
      return ret;
    } 
  }

  public string AssignedHostSerial {
    get {
      string ret = PSMoveClientPINVOKE.PSMPSMove_AssignedHostSerial_get(swigCPtr);
      return ret;
    } 
  }

  public bool PairedToHost {
    get {
      bool ret = PSMoveClientPINVOKE.PSMPSMove_PairedToHost_get(swigCPtr);
      return ret;
    } 
  }

  public PSMConnectionType ConnectionType {
    get {
      PSMConnectionType ret = (PSMConnectionType)PSMoveClientPINVOKE.PSMPSMove_ConnectionType_get(swigCPtr);
      return ret;
    } 
  }

  public PSMTrackingColorType TrackingColorType {
    get {
      PSMTrackingColorType ret = (PSMTrackingColorType)PSMoveClientPINVOKE.PSMPSMove_TrackingColorType_get(swigCPtr);
      return ret;
    } 
  }

  public PSMPosef Pose {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMPSMove_Pose_get(swigCPtr);
      PSMPosef ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMPosef(cPtr, false);
      return ret;
    } 
  }

  public PSMPhysicsData PhysicsData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMPSMove_PhysicsData_get(swigCPtr);
      PSMPhysicsData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMPhysicsData(cPtr, false);
      return ret;
    } 
  }

  public PSMPSMoveRawSensorData RawSensorData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMPSMove_RawSensorData_get(swigCPtr);
      PSMPSMoveRawSensorData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMPSMoveRawSensorData(cPtr, false);
      return ret;
    } 
  }

  public PSMPSMoveCalibratedSensorData CalibratedSensorData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMPSMove_CalibratedSensorData_get(swigCPtr);
      PSMPSMoveCalibratedSensorData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMPSMoveCalibratedSensorData(cPtr, false);
      return ret;
    } 
  }

  public PSMRawTrackerData RawTrackerData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMPSMove_RawTrackerData_get(swigCPtr);
      PSMRawTrackerData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMRawTrackerData(cPtr, false);
      return ret;
    } 
  }

  public PSMButtonState TriangleButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMPSMove_TriangleButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState CircleButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMPSMove_CircleButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState CrossButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMPSMove_CrossButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState SquareButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMPSMove_SquareButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState SelectButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMPSMove_SelectButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState StartButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMPSMove_StartButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState PSButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMPSMove_PSButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState MoveButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMPSMove_MoveButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState TriggerButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMPSMove_TriggerButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMBatteryState BatteryValue {
    get {
      PSMBatteryState ret = (PSMBatteryState)PSMoveClientPINVOKE.PSMPSMove_BatteryValue_get(swigCPtr);
      return ret;
    } 
  }

  public byte TriggerValue {
    get {
      byte ret = PSMoveClientPINVOKE.PSMPSMove_TriggerValue_get(swigCPtr);
      return ret;
    } 
  }

  public byte Rumble {
    get {
      byte ret = PSMoveClientPINVOKE.PSMPSMove_Rumble_get(swigCPtr);
      return ret;
    } 
  }

  public byte LED_r {
    get {
      byte ret = PSMoveClientPINVOKE.PSMPSMove_LED_r_get(swigCPtr);
      return ret;
    } 
  }

  public byte LED_g {
    get {
      byte ret = PSMoveClientPINVOKE.PSMPSMove_LED_g_get(swigCPtr);
      return ret;
    } 
  }

  public byte LED_b {
    get {
      byte ret = PSMoveClientPINVOKE.PSMPSMove_LED_b_get(swigCPtr);
      return ret;
    } 
  }

  public long ResetPoseButtonPressTime {
    get {
      long ret = PSMoveClientPINVOKE.PSMPSMove_ResetPoseButtonPressTime_get(swigCPtr);
      return ret;
    } 
  }

  public bool bResetPoseRequestSent {
    get {
      bool ret = PSMoveClientPINVOKE.PSMPSMove_bResetPoseRequestSent_get(swigCPtr);
      return ret;
    } 
  }

  public bool bPoseResetButtonEnabled {
    get {
      bool ret = PSMoveClientPINVOKE.PSMPSMove_bPoseResetButtonEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public PSMPSMove() : this(PSMoveClientPINVOKE.new_PSMPSMove(), true) {
  }

}

}
