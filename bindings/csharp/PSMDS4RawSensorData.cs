//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PSMoveService {

public class PSMDS4RawSensorData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PSMDS4RawSensorData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PSMDS4RawSensorData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PSMDS4RawSensorData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PSMoveClientPINVOKE.delete_PSMDS4RawSensorData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PSMVector3i Accelerometer {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMDS4RawSensorData_Accelerometer_get(swigCPtr);
      PSMVector3i ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3i(cPtr, false);
      return ret;
    } 
  }

  public PSMVector3i Gyroscope {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMDS4RawSensorData_Gyroscope_get(swigCPtr);
      PSMVector3i ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3i(cPtr, false);
      return ret;
    } 
  }

  public double TimeInSeconds {
    get {
      double ret = PSMoveClientPINVOKE.PSMDS4RawSensorData_TimeInSeconds_get(swigCPtr);
      return ret;
    } 
  }

  public PSMDS4RawSensorData() : this(PSMoveClientPINVOKE.new_PSMDS4RawSensorData(), true) {
  }

}

}
