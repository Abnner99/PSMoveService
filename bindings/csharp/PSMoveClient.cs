//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PSMoveService {

public class PSMoveClient {
  public static uint PSMClientControllerInfo_getSize() {
    uint ret = PSMoveClientPINVOKE.PSMClientControllerInfo_getSize();
    return ret;
  }

  public static uint PSMClientHMDInfo_getSize() {
    uint ret = PSMoveClientPINVOKE.PSMClientHMDInfo_getSize();
    return ret;
  }

  public static uint PSMClientTrackerInfo_getSize() {
    uint ret = PSMoveClientPINVOKE.PSMClientTrackerInfo_getSize();
    return ret;
  }

  public static uint PSMVector2f_getSize() {
    uint ret = PSMoveClientPINVOKE.PSMVector2f_getSize();
    return ret;
  }


  public delegate void PSMResponseCallback(PSMResponseMessage message, System.IntPtr callback_userdata); 

  public static PSMVector2f PSM_Vector2fAdd(PSMVector2f a, PSMVector2f b) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fAdd(PSMVector2f.getCPtr(a), PSMVector2f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fSubtract(PSMVector2f a, PSMVector2f b) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fSubtract(PSMVector2f.getCPtr(a), PSMVector2f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fScale(PSMVector2f v, float s) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fScale(PSMVector2f.getCPtr(v), s), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fScaleAndAdd(PSMVector2f v, float s, PSMVector2f b) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fScaleAndAdd(PSMVector2f.getCPtr(v), s, PSMVector2f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fUnsafeScalarDivide(PSMVector2f numerator, float divisor) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fUnsafeScalarDivide(PSMVector2f.getCPtr(numerator), divisor), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fUnsafeVectorDivide(PSMVector2f numerator, PSMVector2f divisor) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fUnsafeVectorDivide(PSMVector2f.getCPtr(numerator), PSMVector2f.getCPtr(divisor)), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fSafeScalarDivide(PSMVector2f numerator, float divisor, PSMVector2f default_result) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fSafeScalarDivide(PSMVector2f.getCPtr(numerator), divisor, PSMVector2f.getCPtr(default_result)), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fSafeVectorDivide(PSMVector2f numerator, PSMVector2f divisor, PSMVector2f default_result) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fSafeVectorDivide(PSMVector2f.getCPtr(numerator), PSMVector2f.getCPtr(divisor), PSMVector2f.getCPtr(default_result)), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fAbs(PSMVector2f v) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fAbs(PSMVector2f.getCPtr(v)), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fSquare(PSMVector2f v) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fSquare(PSMVector2f.getCPtr(v)), true);
    return ret;
  }

  public static float PSM_Vector2fLength(PSMVector2f v) {
    float ret = PSMoveClientPINVOKE.PSM_Vector2fLength(PSMVector2f.getCPtr(v));
    return ret;
  }

  public static PSMVector2f PSM_Vector2fNormalizeWithDefault(PSMVector2f v, PSMVector2f default_result) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fNormalizeWithDefault(PSMVector2f.getCPtr(v), PSMVector2f.getCPtr(default_result)), true);
    return ret;
  }

  public static float PSM_Vector2fMinValue(PSMVector2f v) {
    float ret = PSMoveClientPINVOKE.PSM_Vector2fMinValue(PSMVector2f.getCPtr(v));
    return ret;
  }

  public static float PSM_Vector2fMaxValue(PSMVector2f v) {
    float ret = PSMoveClientPINVOKE.PSM_Vector2fMaxValue(PSMVector2f.getCPtr(v));
    return ret;
  }

  public static float PSM_Vector2fDot(PSMVector2f a, PSMVector2f b) {
    float ret = PSMoveClientPINVOKE.PSM_Vector2fDot(PSMVector2f.getCPtr(a), PSMVector2f.getCPtr(b));
    return ret;
  }

  public static PSMVector2f PSM_Vector2fMin(PSMVector2f a, PSMVector2f b) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fMin(PSMVector2f.getCPtr(a), PSMVector2f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector2f PSM_Vector2fMax(PSMVector2f a, PSMVector2f b) {
    PSMVector2f ret = new PSMVector2f(PSMoveClientPINVOKE.PSM_Vector2fMax(PSMVector2f.getCPtr(a), PSMVector2f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fAdd(PSMVector3f a, PSMVector3f b) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fAdd(PSMVector3f.getCPtr(a), PSMVector3f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fSubtract(PSMVector3f a, PSMVector3f b) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fSubtract(PSMVector3f.getCPtr(a), PSMVector3f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fScale(PSMVector3f v, float s) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fScale(PSMVector3f.getCPtr(v), s), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fScaleAndAdd(PSMVector3f v, float s, PSMVector3f b) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fScaleAndAdd(PSMVector3f.getCPtr(v), s, PSMVector3f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fUnsafeScalarDivide(PSMVector3f numerator, float divisor) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fUnsafeScalarDivide(PSMVector3f.getCPtr(numerator), divisor), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fUnsafeVectorDivide(PSMVector3f numerator, PSMVector3f divisor) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fUnsafeVectorDivide(PSMVector3f.getCPtr(numerator), PSMVector3f.getCPtr(divisor)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fSafeScalarDivide(PSMVector3f numerator, float divisor, PSMVector3f default_result) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fSafeScalarDivide(PSMVector3f.getCPtr(numerator), divisor, PSMVector3f.getCPtr(default_result)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fSafeVectorDivide(PSMVector3f numerator, PSMVector3f divisor, PSMVector3f default_result) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fSafeVectorDivide(PSMVector3f.getCPtr(numerator), PSMVector3f.getCPtr(divisor), PSMVector3f.getCPtr(default_result)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fAbs(PSMVector3f v) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fAbs(PSMVector3f.getCPtr(v)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fSquare(PSMVector3f v) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fSquare(PSMVector3f.getCPtr(v)), true);
    return ret;
  }

  public static float PSM_Vector3fLength(PSMVector3f v) {
    float ret = PSMoveClientPINVOKE.PSM_Vector3fLength(PSMVector3f.getCPtr(v));
    return ret;
  }

  public static PSMVector3f PSM_Vector3fNormalizeWithDefault(PSMVector3f v, PSMVector3f default_result) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fNormalizeWithDefault(PSMVector3f.getCPtr(v), PSMVector3f.getCPtr(default_result)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fNormalizeWithDefaultGetLength(PSMVector3f v, PSMVector3f default_result, out float out_length) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fNormalizeWithDefaultGetLength(PSMVector3f.getCPtr(v), PSMVector3f.getCPtr(default_result), out out_length), true);
    return ret;
  }

  public static float PSM_Vector3fMinValue(PSMVector3f v) {
    float ret = PSMoveClientPINVOKE.PSM_Vector3fMinValue(PSMVector3f.getCPtr(v));
    return ret;
  }

  public static float PSM_Vector3fMaxValue(PSMVector3f v) {
    float ret = PSMoveClientPINVOKE.PSM_Vector3fMaxValue(PSMVector3f.getCPtr(v));
    return ret;
  }

  public static float PSM_Vector3fDot(PSMVector3f a, PSMVector3f b) {
    float ret = PSMoveClientPINVOKE.PSM_Vector3fDot(PSMVector3f.getCPtr(a), PSMVector3f.getCPtr(b));
    return ret;
  }

  public static PSMVector3f PSM_Vector3fCross(PSMVector3f a, PSMVector3f b) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fCross(PSMVector3f.getCPtr(a), PSMVector3f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fMin(PSMVector3f a, PSMVector3f b) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fMin(PSMVector3f.getCPtr(a), PSMVector3f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3fMax(PSMVector3f a, PSMVector3f b) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3fMax(PSMVector3f.getCPtr(a), PSMVector3f.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3i PSM_Vector3iAdd(PSMVector3i a, PSMVector3i b) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iAdd(PSMVector3i.getCPtr(a), PSMVector3i.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3i PSM_Vector3iSubtract(PSMVector3i a, PSMVector3i b) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iSubtract(PSMVector3i.getCPtr(a), PSMVector3i.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3i PSM_Vector3iUnsafeScalarDivide(PSMVector3i numerator, int divisor) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iUnsafeScalarDivide(PSMVector3i.getCPtr(numerator), divisor), true);
    return ret;
  }

  public static PSMVector3i PSM_Vector3iUnsafeVectorDivide(PSMVector3i numerator, PSMVector3i divisor) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iUnsafeVectorDivide(PSMVector3i.getCPtr(numerator), PSMVector3i.getCPtr(divisor)), true);
    return ret;
  }

  public static PSMVector3i PSM_Vector3iSafeScalarDivide(PSMVector3i numerator, int divisor, PSMVector3i default_result) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iSafeScalarDivide(PSMVector3i.getCPtr(numerator), divisor, PSMVector3i.getCPtr(default_result)), true);
    return ret;
  }

  public static PSMVector3i PSM_Vector3iSafeVectorDivide(PSMVector3i numerator, PSMVector3i divisor, PSMVector3i default_result) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iSafeVectorDivide(PSMVector3i.getCPtr(numerator), PSMVector3i.getCPtr(divisor), PSMVector3i.getCPtr(default_result)), true);
    return ret;
  }

  public static PSMVector3i PSM_Vector3iAbs(PSMVector3i v) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iAbs(PSMVector3i.getCPtr(v)), true);
    return ret;
  }

  public static PSMVector3i PSM_Vector3iSquare(PSMVector3i v) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iSquare(PSMVector3i.getCPtr(v)), true);
    return ret;
  }

  public static int PSM_Vector3iLengthSquared(PSMVector3i v) {
    int ret = PSMoveClientPINVOKE.PSM_Vector3iLengthSquared(PSMVector3i.getCPtr(v));
    return ret;
  }

  public static int PSM_Vector3iMinValue(PSMVector3i v) {
    int ret = PSMoveClientPINVOKE.PSM_Vector3iMinValue(PSMVector3i.getCPtr(v));
    return ret;
  }

  public static int PSM_Vector3iMaxValue(PSMVector3i v) {
    int ret = PSMoveClientPINVOKE.PSM_Vector3iMaxValue(PSMVector3i.getCPtr(v));
    return ret;
  }

  public static PSMVector3i PSM_Vector3iMin(PSMVector3i a, PSMVector3i b) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iMin(PSMVector3i.getCPtr(a), PSMVector3i.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3i PSM_Vector3iMax(PSMVector3i a, PSMVector3i b) {
    PSMVector3i ret = new PSMVector3i(PSMoveClientPINVOKE.PSM_Vector3iMax(PSMVector3i.getCPtr(a), PSMVector3i.getCPtr(b)), true);
    return ret;
  }

  public static PSMVector3f PSM_Vector3iCastToFloat(PSMVector3i v) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Vector3iCastToFloat(PSMVector3i.getCPtr(v)), true);
    return ret;
  }

  public static PSMQuatf PSM_QuatfCreate(float w, float x, float y, float z) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfCreate(w, x, y, z), true);
    return ret;
  }

  public static PSMQuatf PSM_QuatfCreateFromAngles(PSMVector3f eulerAngles) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfCreateFromAngles(PSMVector3f.getCPtr(eulerAngles)), true);
    return ret;
  }

  public static PSMQuatf PSM_QuatfAdd(PSMQuatf a, PSMQuatf b) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfAdd(PSMQuatf.getCPtr(a), PSMQuatf.getCPtr(b)), true);
    return ret;
  }

  public static PSMQuatf PSM_QuatfScale(PSMQuatf q, float s) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfScale(PSMQuatf.getCPtr(q), s), true);
    return ret;
  }

  public static PSMQuatf PSM_QuatfMultiply(PSMQuatf a, PSMQuatf b) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfMultiply(PSMQuatf.getCPtr(a), PSMQuatf.getCPtr(b)), true);
    return ret;
  }

  public static PSMQuatf PSM_QuatfUnsafeScalarDivide(PSMQuatf q, float s) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfUnsafeScalarDivide(PSMQuatf.getCPtr(q), s), true);
    return ret;
  }

  public static PSMQuatf PSM_QuatfSafeScalarDivide(PSMQuatf q, float s, PSMQuatf default_result) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfSafeScalarDivide(PSMQuatf.getCPtr(q), s, PSMQuatf.getCPtr(default_result)), true);
    return ret;
  }

  public static PSMQuatf PSM_QuatfConjugate(PSMQuatf q) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfConjugate(PSMQuatf.getCPtr(q)), true);
    return ret;
  }

  public static PSMQuatf PSM_QuatfConcat(PSMQuatf first, PSMQuatf second) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfConcat(PSMQuatf.getCPtr(first), PSMQuatf.getCPtr(second)), true);
    return ret;
  }

  public static PSMVector3f PSM_QuatfRotateVector(PSMQuatf q, PSMVector3f v) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_QuatfRotateVector(PSMQuatf.getCPtr(q), PSMVector3f.getCPtr(v)), true);
    return ret;
  }

  public static float PSM_QuatfLength(PSMQuatf q) {
    float ret = PSMoveClientPINVOKE.PSM_QuatfLength(PSMQuatf.getCPtr(q));
    return ret;
  }

  public static PSMQuatf PSM_QuatfNormalizeWithDefault(PSMQuatf q, PSMQuatf default_result) {
    PSMQuatf ret = new PSMQuatf(PSMoveClientPINVOKE.PSM_QuatfNormalizeWithDefault(PSMQuatf.getCPtr(q), PSMQuatf.getCPtr(default_result)), true);
    return ret;
  }

  public static PSMMatrix3f PSM_Matrix3fCreate(PSMVector3f basis_x, PSMVector3f basis_y, PSMVector3f basis_z) {
    PSMMatrix3f ret = new PSMMatrix3f(PSMoveClientPINVOKE.PSM_Matrix3fCreate(PSMVector3f.getCPtr(basis_x), PSMVector3f.getCPtr(basis_y), PSMVector3f.getCPtr(basis_z)), true);
    return ret;
  }

  public static PSMMatrix3f PSM_Matrix3fCreateFromQuatf(PSMQuatf q) {
    PSMMatrix3f ret = new PSMMatrix3f(PSMoveClientPINVOKE.PSM_Matrix3fCreateFromQuatf(PSMQuatf.getCPtr(q)), true);
    return ret;
  }

  public static PSMVector3f PSM_Matrix3fBasisX(PSMMatrix3f m) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Matrix3fBasisX(PSMMatrix3f.getCPtr(m)), true);
    return ret;
  }

  public static PSMVector3f PSM_Matrix3fBasisY(PSMMatrix3f m) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Matrix3fBasisY(PSMMatrix3f.getCPtr(m)), true);
    return ret;
  }

  public static PSMVector3f PSM_Matrix3fBasisZ(PSMMatrix3f m) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_Matrix3fBasisZ(PSMMatrix3f.getCPtr(m)), true);
    return ret;
  }

  public static PSMPosef PSM_PosefCreate(PSMVector3f position, PSMQuatf orientation) {
    PSMPosef ret = new PSMPosef(PSMoveClientPINVOKE.PSM_PosefCreate(PSMVector3f.getCPtr(position), PSMQuatf.getCPtr(orientation)), true);
    return ret;
  }

  public static PSMPosef PSM_PosefInverse(PSMPosef pose) {
    PSMPosef ret = new PSMPosef(PSMoveClientPINVOKE.PSM_PosefInverse(PSMPosef.getCPtr(pose)), true);
    return ret;
  }

  public static PSMPosef PSM_PosefConcat(PSMPosef first, PSMPosef second) {
    PSMPosef ret = new PSMPosef(PSMoveClientPINVOKE.PSM_PosefConcat(PSMPosef.getCPtr(first), PSMPosef.getCPtr(second)), true);
    return ret;
  }

  public static PSMVector3f PSM_PosefTransformPoint(PSMPosef pose, PSMVector3f p) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_PosefTransformPoint(PSMPosef.getCPtr(pose), PSMVector3f.getCPtr(p)), true);
    return ret;
  }

  public static PSMVector3f PSM_PosefInverseTransformPoint(PSMPosef pose, PSMVector3f p) {
    PSMVector3f ret = new PSMVector3f(PSMoveClientPINVOKE.PSM_PosefInverseTransformPoint(PSMPosef.getCPtr(pose), PSMVector3f.getCPtr(p)), true);
    return ret;
  }

  public static void PSM_FrustumSetPose(PSMFrustum frustum, PSMPosef pose) {
    PSMoveClientPINVOKE.PSM_FrustumSetPose(PSMFrustum.getCPtr(frustum), PSMPosef.getCPtr(pose));
  }

  public static float PSM_TrackingProjectionGetArea(PSMTrackingProjection proj) {
    float ret = PSMoveClientPINVOKE.PSM_TrackingProjectionGetArea(PSMTrackingProjection.getCPtr(proj));
    return ret;
  }

  public static PSMVector3i k_psm_int_vector3_zero {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_int_vector3_zero_get();
      PSMVector3i ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3i(cPtr, false);
      return ret;
    } 
  }

  public static PSMVector3f k_psm_float_vector3_zero {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_float_vector3_zero_get();
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public static PSMVector3i k_psm_int_vector3_one {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_int_vector3_one_get();
      PSMVector3i ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3i(cPtr, false);
      return ret;
    } 
  }

  public static PSMVector3f k_psm_float_vector3_one {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_float_vector3_one_get();
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public static PSMVector3f k_psm_float_vector3_i {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_float_vector3_i_get();
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public static PSMVector3f k_psm_float_vector3_j {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_float_vector3_j_get();
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public static PSMVector3f k_psm_float_vector3_k {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_float_vector3_k_get();
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public static PSMVector3f k_psm_position_origin {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_position_origin_get();
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public static PSMQuatf k_psm_quaternion_identity {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_quaternion_identity_get();
      PSMQuatf ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMQuatf(cPtr, false);
      return ret;
    } 
  }

  public static PSMMatrix3f k_psm_matrix_identity {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_matrix_identity_get();
      PSMMatrix3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMMatrix3f(cPtr, false);
      return ret;
    } 
  }

  public static PSMPosef k_psm_pose_identity {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.k_psm_pose_identity_get();
      PSMPosef ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMPosef(cPtr, false);
      return ret;
    } 
  }

  public static int PSM_INVALID_REQUEST_ID {
    get {
      int ret = PSMoveClientPINVOKE.PSM_INVALID_REQUEST_ID_get();
      return ret;
    } 
  }

  public static PSMResult PSM_Initialize(string host, string port, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_Initialize(host, port, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_Shutdown() {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_Shutdown();
    return ret;
  }

  public static PSMResult PSM_InitializeAsync(string host, string port) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_InitializeAsync(host, port);
    return ret;
  }

  public static PSMResult PSM_Update() {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_Update();
    return ret;
  }

  public static PSMResult PSM_UpdateNoPollMessages() {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_UpdateNoPollMessages();
    return ret;
  }

  public static string PSM_GetClientVersionString() {
    string ret = PSMoveClientPINVOKE.PSM_GetClientVersionString();
    return ret;
  }

  public static bool PSM_GetIsInitialized() {
    bool ret = PSMoveClientPINVOKE.PSM_GetIsInitialized();
    return ret;
  }

  public static bool PSM_GetIsConnected() {
    bool ret = PSMoveClientPINVOKE.PSM_GetIsConnected();
    return ret;
  }

  public static bool PSM_HasConnectionStatusChanged() {
    bool ret = PSMoveClientPINVOKE.PSM_HasConnectionStatusChanged();
    return ret;
  }

  public static bool PSM_HasControllerListChanged() {
    bool ret = PSMoveClientPINVOKE.PSM_HasControllerListChanged();
    return ret;
  }

  public static bool PSM_HasTrackerListChanged() {
    bool ret = PSMoveClientPINVOKE.PSM_HasTrackerListChanged();
    return ret;
  }

  public static bool PSM_HasHMDListChanged() {
    bool ret = PSMoveClientPINVOKE.PSM_HasHMDListChanged();
    return ret;
  }

  public static bool PSM_WasSystemButtonPressed() {
    bool ret = PSMoveClientPINVOKE.PSM_WasSystemButtonPressed();
    return ret;
  }

  public static PSMResult PSM_GetServiceVersionString(string out_version_string, uint max_version_string, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetServiceVersionString(out_version_string, max_version_string, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_GetServiceVersionStringAsync(out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetServiceVersionStringAsync(out out_request_id);
    return ret;
  }

  public static PSMResult PSM_PollNextMessage(PSMMessage out_message, uint message_size) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_PollNextMessage(PSMMessage.getCPtr(out_message), message_size);
    return ret;
  }

  public static PSMResult PSM_SendOpaqueRequest(System.IntPtr request_handle, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SendOpaqueRequest(request_handle, out out_request_id);
    return ret;
  }

  public static PSMResult PSM_RegisterSTDCALLCallback(int request_id, PSMoveClient.PSMResponseCallback callback, System.IntPtr callback_userdata) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_RegisterSTDCALLCallback(request_id, callback, callback_userdata);
    return ret;
  }

  public static PSMResult PSM_CancelCallback(int request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_CancelCallback(request_id);
    return ret;
  }

  public static PSMResult PSM_EatResponse(int request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_EatResponse(request_id);
    return ret;
  }

  public static PSMController PSM_GetController(int controller_id) {
    global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSM_GetController(controller_id);
    PSMController ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMController(cPtr, false);
    return ret;
  }

  public static PSMResult PSM_AllocateControllerListener(int controller_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_AllocateControllerListener(controller_id);
    return ret;
  }

  public static PSMResult PSM_FreeControllerListener(int controller_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_FreeControllerListener(controller_id);
    return ret;
  }

  public static PSMResult PSM_GetControllerList(PSMControllerList out_controller_list, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerList(PSMControllerList.getCPtr(out_controller_list), timeout_ms);
    return ret;
  }

  public static PSMResult PSM_StartControllerDataStream(int controller_id, uint data_stream_flags, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StartControllerDataStream(controller_id, data_stream_flags, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_StopControllerDataStream(int controller_id, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StopControllerDataStream(controller_id, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_SetControllerLEDTrackingColor(int controller_id, PSMTrackingColorType tracking_color, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetControllerLEDTrackingColor(controller_id, (int)tracking_color, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_ResetControllerOrientation(int controller_id, PSMQuatf q_pose, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_ResetControllerOrientation(controller_id, PSMQuatf.getCPtr(q_pose), timeout_ms);
    return ret;
  }

  public static PSMResult PSM_SetControllerDataStreamTrackerIndex(int controller_id, int tracker_id, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetControllerDataStreamTrackerIndex(controller_id, tracker_id, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_SetControllerHand(int controller_id, PSMControllerHand hand, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetControllerHand(controller_id, (int)hand, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_GetControllerOrientation(int controller_id, PSMQuatf out_orientation) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerOrientation(controller_id, PSMQuatf.getCPtr(out_orientation));
    return ret;
  }

  public static PSMResult PSM_GetControllerPosition(int controller_id, PSMVector3f out_position) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerPosition(controller_id, PSMVector3f.getCPtr(out_position));
    return ret;
  }

  public static PSMResult PSM_GetControllerPose(int controller_id, PSMPosef out_pose) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerPose(controller_id, PSMPosef.getCPtr(out_pose));
    return ret;
  }

  public static PSMResult PSM_GetControllerRumble(int controller_id, PSMControllerRumbleChannel channel, out float out_rumble_fraction) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerRumble(controller_id, (int)channel, out out_rumble_fraction);
    return ret;
  }

  public static PSMResult PSM_GetIsControllerStable(int controller_id, out bool out_is_stable) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetIsControllerStable(controller_id, out out_is_stable);
    return ret;
  }

  public static PSMResult PSM_GetIsControllerTracking(int controller_id, out bool out_is_tracking) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetIsControllerTracking(controller_id, out out_is_tracking);
    return ret;
  }

  public static PSMResult PSM_GetControllerPixelLocationOnTracker(int controller_id, out int out_tracker_id, PSMVector2f out_location) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerPixelLocationOnTracker(controller_id, out out_tracker_id, PSMVector2f.getCPtr(out_location));
    return ret;
  }

  public static PSMResult PSM_GetControllerPositionOnTracker(int controller_id, out int out_tracker_id, PSMVector3f outPosition) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerPositionOnTracker(controller_id, out out_tracker_id, PSMVector3f.getCPtr(outPosition));
    return ret;
  }

  public static PSMResult PSM_GetControllerOrientationOnTracker(int controller_id, out int out_tracker_id, PSMQuatf outOrientation) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerOrientationOnTracker(controller_id, out out_tracker_id, PSMQuatf.getCPtr(outOrientation));
    return ret;
  }

  public static PSMResult PSM_GetControllerProjectionOnTracker(int controller_id, out int out_tracker_id, PSMTrackingProjection out_projection) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerProjectionOnTracker(controller_id, out out_tracker_id, PSMTrackingProjection.getCPtr(out_projection));
    return ret;
  }

  public static PSMResult PSM_SetControllerLEDOverrideColor(int controller_id, byte r, byte g, byte b) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetControllerLEDOverrideColor(controller_id, r, g, b);
    return ret;
  }

  public static PSMResult PSM_SetControllerRumble(int controller_id, PSMControllerRumbleChannel channel, float rumble_fraction) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetControllerRumble(controller_id, (int)channel, rumble_fraction);
    return ret;
  }

  public static PSMResult PSM_GetControllerListAsync(out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetControllerListAsync(out out_request_id);
    return ret;
  }

  public static PSMResult PSM_StartControllerDataStreamAsync(int controller_id, uint data_stream_flags, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StartControllerDataStreamAsync(controller_id, data_stream_flags, out out_request_id);
    return ret;
  }

  public static PSMResult PSM_StopControllerDataStreamAsync(int controller_id, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StopControllerDataStreamAsync(controller_id, out out_request_id);
    return ret;
  }

  public static PSMResult PSM_SetControllerLEDColorAsync(int controller_id, PSMTrackingColorType tracking_color, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetControllerLEDColorAsync(controller_id, (int)tracking_color, out out_request_id);
    return ret;
  }

  public static PSMResult PSM_ResetControllerOrientationAsync(int controller_id, PSMQuatf q_pose, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_ResetControllerOrientationAsync(controller_id, PSMQuatf.getCPtr(q_pose), out out_request_id);
    return ret;
  }

  public static PSMResult PSM_SetControllerDataStreamTrackerIndexAsync(int controller_id, int tracker_id, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetControllerDataStreamTrackerIndexAsync(controller_id, tracker_id, out out_request_id);
    return ret;
  }

  public static PSMResult PSM_SetControllerHandAsync(int controller_id, PSMControllerHand hand, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetControllerHandAsync(controller_id, (int)hand, out out_request_id);
    return ret;
  }

  public static PSMTracker PSM_GetTracker(int tracker_id) {
    global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSM_GetTracker(tracker_id);
    PSMTracker ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMTracker(cPtr, false);
    return ret;
  }

  public static PSMResult PSM_AllocateTrackerListener(int tracker_id, PSMClientTrackerInfo tracker_info) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_AllocateTrackerListener(tracker_id, PSMClientTrackerInfo.getCPtr(tracker_info));
    return ret;
  }

  public static PSMResult PSM_FreeTrackerListener(int controller_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_FreeTrackerListener(controller_id);
    return ret;
  }

  public static PSMResult PSM_GetTrackerIntrinsicMatrix(int tracker_id, PSMMatrix3f out_matrix) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetTrackerIntrinsicMatrix(tracker_id, PSMMatrix3f.getCPtr(out_matrix));
    return ret;
  }

  public static PSMResult PSM_GetTrackerList(PSMTrackerList out_tracker_list, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetTrackerList(PSMTrackerList.getCPtr(out_tracker_list), timeout_ms);
    return ret;
  }

  public static PSMResult PSM_StartTrackerDataStream(int tracker_id, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StartTrackerDataStream(tracker_id, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_StopTrackerDataStream(int tracker_id, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StopTrackerDataStream(tracker_id, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_GetTrackingSpaceSettings(PSMTrackingSpace out_tracking_space, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetTrackingSpaceSettings(PSMTrackingSpace.getCPtr(out_tracking_space), timeout_ms);
    return ret;
  }

  public static PSMResult PSM_OpenTrackerVideoStream(int tracker_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_OpenTrackerVideoStream(tracker_id);
    return ret;
  }

  public static PSMResult PSM_PollTrackerVideoStream(int tracker_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_PollTrackerVideoStream(tracker_id);
    return ret;
  }

  public static PSMResult PSM_CloseTrackerVideoStream(int tracker_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_CloseTrackerVideoStream(tracker_id);
    return ret;
  }

  public static PSMResult PSM_GetTrackerVideoFrameBuffer(int tracker_id, PSMVideoFrameBuffer out_buffer) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetTrackerVideoFrameBuffer(tracker_id, PSMVideoFrameBuffer.getCPtr(out_buffer));
    return ret;
  }

  public static PSMResult PSM_GetTrackerFrustum(int tracker_id, PSMFrustum out_frustum) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetTrackerFrustum(tracker_id, PSMFrustum.getCPtr(out_frustum));
    return ret;
  }

  public static PSMResult PSM_GetTrackerListAsync(out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetTrackerListAsync(out out_request_id);
    return ret;
  }

  public static PSMResult PSM_StartTrackerDataStreamAsync(int tracker_id, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StartTrackerDataStreamAsync(tracker_id, out out_request_id);
    return ret;
  }

  public static PSMResult PSM_StopTrackerDataStreamAsync(int tracker_id, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StopTrackerDataStreamAsync(tracker_id, out out_request_id);
    return ret;
  }

  public static PSMResult PSM_GetTrackingSpaceSettingsAsync(out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetTrackingSpaceSettingsAsync(out out_request_id);
    return ret;
  }

  public static PSMHeadMountedDisplay PSM_GetHmd(int hmd_id) {
    global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSM_GetHmd(hmd_id);
    PSMHeadMountedDisplay ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMHeadMountedDisplay(cPtr, false);
    return ret;
  }

  public static PSMResult PSM_AllocateHmdListener(int hmd_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_AllocateHmdListener(hmd_id);
    return ret;
  }

  public static PSMResult PSM_FreeHmdListener(int hmd_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_FreeHmdListener(hmd_id);
    return ret;
  }

  public static PSMResult PSM_GetHmdOrientation(int hmd_id, PSMQuatf out_orientation) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetHmdOrientation(hmd_id, PSMQuatf.getCPtr(out_orientation));
    return ret;
  }

  public static PSMResult PSM_GetHmdPosition(int hmd_id, PSMVector3f out_position) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetHmdPosition(hmd_id, PSMVector3f.getCPtr(out_position));
    return ret;
  }

  public static PSMResult PSM_GetHmdPose(int hmd_id, PSMPosef out_pose) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetHmdPose(hmd_id, PSMPosef.getCPtr(out_pose));
    return ret;
  }

  public static PSMResult PSM_GetIsHmdStable(int hmd_id, out bool out_is_stable) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetIsHmdStable(hmd_id, out out_is_stable);
    return ret;
  }

  public static PSMResult PSM_GetIsHmdTracking(int hmd_id, out bool out_is_tracking) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetIsHmdTracking(hmd_id, out out_is_tracking);
    return ret;
  }

  public static PSMResult PSM_GetHmdPixelLocationOnTracker(int hmd_id, out int out_tracker_id, PSMVector2f out_location) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetHmdPixelLocationOnTracker(hmd_id, out out_tracker_id, PSMVector2f.getCPtr(out_location));
    return ret;
  }

  public static PSMResult PSM_GetHmdPositionOnTracker(int hmd_id, out int out_tracker_id, PSMVector3f out_position) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetHmdPositionOnTracker(hmd_id, out out_tracker_id, PSMVector3f.getCPtr(out_position));
    return ret;
  }

  public static PSMResult PSM_GetHmdOrientationOnTracker(int hmd_id, out int out_tracker_id, PSMQuatf out_orientation) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetHmdOrientationOnTracker(hmd_id, out out_tracker_id, PSMQuatf.getCPtr(out_orientation));
    return ret;
  }

  public static PSMResult PSM_GetHmdProjectionOnTracker(int hmd_id, out int out_tracker_id, PSMTrackingProjection out_projection) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetHmdProjectionOnTracker(hmd_id, out out_tracker_id, PSMTrackingProjection.getCPtr(out_projection));
    return ret;
  }

  public static PSMResult PSM_GetHmdList(PSMHmdList out_hmd_list, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetHmdList(PSMHmdList.getCPtr(out_hmd_list), timeout_ms);
    return ret;
  }

  public static PSMResult PSM_StartHmdDataStream(int hmd_id, uint data_stream_flags, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StartHmdDataStream(hmd_id, data_stream_flags, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_StopHmdDataStream(int hmd_id, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StopHmdDataStream(hmd_id, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_SetHmdDataStreamTrackerIndex(int hmd_id, int tracker_id, int timeout_ms) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetHmdDataStreamTrackerIndex(hmd_id, tracker_id, timeout_ms);
    return ret;
  }

  public static PSMResult PSM_GetHmdListAsync(out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_GetHmdListAsync(out out_request_id);
    return ret;
  }

  public static PSMResult PSM_StartHmdDataStreamAsync(int hmd_id, uint data_stream_flags, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StartHmdDataStreamAsync(hmd_id, data_stream_flags, out out_request_id);
    return ret;
  }

  public static PSMResult PSM_StopHmdDataStreamAsync(int hmd_id, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_StopHmdDataStreamAsync(hmd_id, out out_request_id);
    return ret;
  }

  public static PSMResult PSM_SetHmdDataStreamTrackerIndexAsync(int hmd_id, int tracker_id, out int out_request_id) {
    PSMResult ret = (PSMResult)PSMoveClientPINVOKE.PSM_SetHmdDataStreamTrackerIndexAsync(hmd_id, tracker_id, out out_request_id);
    return ret;
  }

  public static readonly string PSMOVESERVICE_DEFAULT_ADDRESS = PSMoveClientPINVOKE.PSMOVESERVICE_DEFAULT_ADDRESS_get();
  public static readonly string PSMOVESERVICE_DEFAULT_PORT = PSMoveClientPINVOKE.PSMOVESERVICE_DEFAULT_PORT_get();
  public static readonly int MAX_OUTPUT_DATA_FRAME_MESSAGE_SIZE = PSMoveClientPINVOKE.MAX_OUTPUT_DATA_FRAME_MESSAGE_SIZE_get();
  public static readonly int MAX_INPUT_DATA_FRAME_MESSAGE_SIZE = PSMoveClientPINVOKE.MAX_INPUT_DATA_FRAME_MESSAGE_SIZE_get();
  public static readonly int PSMOVESERVICE_MAX_CONTROLLER_COUNT = PSMoveClientPINVOKE.PSMOVESERVICE_MAX_CONTROLLER_COUNT_get();
  public static readonly int PSMOVESERVICE_MAX_TRACKER_COUNT = PSMoveClientPINVOKE.PSMOVESERVICE_MAX_TRACKER_COUNT_get();
  public static readonly int PSMOVESERVICE_MAX_HMD_COUNT = PSMoveClientPINVOKE.PSMOVESERVICE_MAX_HMD_COUNT_get();
  public static readonly int PSM_MAX_VIRTUAL_CONTROLLER_AXES = PSMoveClientPINVOKE.PSM_MAX_VIRTUAL_CONTROLLER_AXES_get();
  public static readonly int PSM_MAX_VIRTUAL_CONTROLLER_BUTTONS = PSMoveClientPINVOKE.PSM_MAX_VIRTUAL_CONTROLLER_BUTTONS_get();
  public static readonly int PSM_DEFAULT_TIMEOUT = PSMoveClientPINVOKE.PSM_DEFAULT_TIMEOUT_get();
  public static readonly int PSMOVESERVICE_CONTROLLER_SERIAL_LEN = PSMoveClientPINVOKE.PSMOVESERVICE_CONTROLLER_SERIAL_LEN_get();
  public static readonly int PSMOVESERVICE_MAX_VERSION_STRING_LEN = PSMoveClientPINVOKE.PSMOVESERVICE_MAX_VERSION_STRING_LEN_get();
  public static readonly double PSM_METERS_TO_CENTIMETERS = PSMoveClientPINVOKE.PSM_METERS_TO_CENTIMETERS_get();
  public static readonly double PSM_CENTIMETERS_TO_METERS = PSMoveClientPINVOKE.PSM_CENTIMETERS_TO_METERS_get();
}

}
