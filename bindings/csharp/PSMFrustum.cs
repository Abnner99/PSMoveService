//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PSMoveService {

public class PSMFrustum : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PSMFrustum(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PSMFrustum obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PSMFrustum() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PSMoveClientPINVOKE.delete_PSMFrustum(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PSMVector3f origin {
    set {
      PSMoveClientPINVOKE.PSMFrustum_origin_set(swigCPtr, PSMVector3f.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMFrustum_origin_get(swigCPtr);
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public PSMVector3f forward {
    set {
      PSMoveClientPINVOKE.PSMFrustum_forward_set(swigCPtr, PSMVector3f.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMFrustum_forward_get(swigCPtr);
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public PSMVector3f left {
    set {
      PSMoveClientPINVOKE.PSMFrustum_left_set(swigCPtr, PSMVector3f.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMFrustum_left_get(swigCPtr);
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public PSMVector3f up {
    set {
      PSMoveClientPINVOKE.PSMFrustum_up_set(swigCPtr, PSMVector3f.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMFrustum_up_get(swigCPtr);
      PSMVector3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMVector3f(cPtr, false);
      return ret;
    } 
  }

  public float HFOV {
    set {
      PSMoveClientPINVOKE.PSMFrustum_HFOV_set(swigCPtr, value);
    } 
    get {
      float ret = PSMoveClientPINVOKE.PSMFrustum_HFOV_get(swigCPtr);
      return ret;
    } 
  }

  public float VFOV {
    set {
      PSMoveClientPINVOKE.PSMFrustum_VFOV_set(swigCPtr, value);
    } 
    get {
      float ret = PSMoveClientPINVOKE.PSMFrustum_VFOV_get(swigCPtr);
      return ret;
    } 
  }

  public float zNear {
    set {
      PSMoveClientPINVOKE.PSMFrustum_zNear_set(swigCPtr, value);
    } 
    get {
      float ret = PSMoveClientPINVOKE.PSMFrustum_zNear_get(swigCPtr);
      return ret;
    } 
  }

  public float zFar {
    set {
      PSMoveClientPINVOKE.PSMFrustum_zFar_set(swigCPtr, value);
    } 
    get {
      float ret = PSMoveClientPINVOKE.PSMFrustum_zFar_get(swigCPtr);
      return ret;
    } 
  }

  public PSMFrustum() : this(PSMoveClientPINVOKE.new_PSMFrustum(), true) {
  }

}

}
