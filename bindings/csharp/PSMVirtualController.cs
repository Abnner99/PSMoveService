//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PSMoveService {

public class PSMVirtualController : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PSMVirtualController(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PSMVirtualController obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PSMVirtualController() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PSMoveClientPINVOKE.delete_PSMVirtualController(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool bIsTrackingEnabled {
    get {
      bool ret = PSMoveClientPINVOKE.PSMVirtualController_bIsTrackingEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsCurrentlyTracking {
    get {
      bool ret = PSMoveClientPINVOKE.PSMVirtualController_bIsCurrentlyTracking_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsPositionValid {
    get {
      bool ret = PSMoveClientPINVOKE.PSMVirtualController_bIsPositionValid_get(swigCPtr);
      return ret;
    } 
  }

  public string DevicePath {
    get {
      string ret = PSMoveClientPINVOKE.PSMVirtualController_DevicePath_get(swigCPtr);
      return ret;
    } 
  }

  public int vendorID {
    get {
      int ret = PSMoveClientPINVOKE.PSMVirtualController_vendorID_get(swigCPtr);
      return ret;
    } 
  }

  public int productID {
    get {
      int ret = PSMoveClientPINVOKE.PSMVirtualController_productID_get(swigCPtr);
      return ret;
    } 
  }

  public int numAxes {
    get {
      int ret = PSMoveClientPINVOKE.PSMVirtualController_numAxes_get(swigCPtr);
      return ret;
    } 
  }

  public int numButtons {
    get {
      int ret = PSMoveClientPINVOKE.PSMVirtualController_numButtons_get(swigCPtr);
      return ret;
    } 
  }

  public byte[] axisStates {
    get {
      System.IntPtr cPtr = PSMoveClientPINVOKE.PSMVirtualController_axisStates_get(swigCPtr);
      int len = (int)this.numAxes;
      if (len<=0)
      {
        return null;
      }
      byte[] returnArray = new byte[len];
      System.Runtime.InteropServices.Marshal.Copy(cPtr, returnArray, 0, len);
       
      return returnArray;
    }
  
  }

  public PSMButtonState[] buttonStates {
    get {
      System.IntPtr cPtr = PSMoveClientPINVOKE.PSMVirtualController_buttonStates_get(swigCPtr);
      int len = (int)this.numButtons;
      if (len<=0)
      {
        return null;
      }
      PSMButtonState[] returnArray = new PSMButtonState[len];
      byte[] intermediateArray = new byte[len];
      System.Runtime.InteropServices.Marshal.Copy(cPtr, intermediateArray, 0, len);
      for (int i = 0; i < len; ++i)
      {
        returnArray[i] = (PSMButtonState)intermediateArray[i];
      }
       
      return returnArray;
    }
  
  }

  public PSMTrackingColorType TrackingColorType {
    get {
      PSMTrackingColorType ret = (PSMTrackingColorType)PSMoveClientPINVOKE.PSMVirtualController_TrackingColorType_get(swigCPtr);
      return ret;
    } 
  }

  public PSMPosef Pose {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMVirtualController_Pose_get(swigCPtr);
      PSMPosef ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMPosef(cPtr, false);
      return ret;
    } 
  }

  public PSMPhysicsData PhysicsData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMVirtualController_PhysicsData_get(swigCPtr);
      PSMPhysicsData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMPhysicsData(cPtr, false);
      return ret;
    } 
  }

  public PSMRawTrackerData RawTrackerData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMVirtualController_RawTrackerData_get(swigCPtr);
      PSMRawTrackerData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMRawTrackerData(cPtr, false);
      return ret;
    } 
  }

  public PSMVirtualController() : this(PSMoveClientPINVOKE.new_PSMVirtualController(), true) {
  }

}

}
