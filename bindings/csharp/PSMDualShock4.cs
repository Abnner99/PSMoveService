//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PSMoveService {

public class PSMDualShock4 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PSMDualShock4(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PSMDualShock4 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PSMDualShock4() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PSMoveClientPINVOKE.delete_PSMDualShock4(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool bHasValidHardwareCalibration {
    get {
      bool ret = PSMoveClientPINVOKE.PSMDualShock4_bHasValidHardwareCalibration_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsTrackingEnabled {
    get {
      bool ret = PSMoveClientPINVOKE.PSMDualShock4_bIsTrackingEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsCurrentlyTracking {
    get {
      bool ret = PSMoveClientPINVOKE.PSMDualShock4_bIsCurrentlyTracking_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsOrientationValid {
    get {
      bool ret = PSMoveClientPINVOKE.PSMDualShock4_bIsOrientationValid_get(swigCPtr);
      return ret;
    } 
  }

  public bool bIsPositionValid {
    get {
      bool ret = PSMoveClientPINVOKE.PSMDualShock4_bIsPositionValid_get(swigCPtr);
      return ret;
    } 
  }

  public bool bHasUnpublishedState {
    get {
      bool ret = PSMoveClientPINVOKE.PSMDualShock4_bHasUnpublishedState_get(swigCPtr);
      return ret;
    } 
  }

  public string DevicePath {
    get {
      string ret = PSMoveClientPINVOKE.PSMDualShock4_DevicePath_get(swigCPtr);
      return ret;
    } 
  }

  public string DeviceSerial {
    get {
      string ret = PSMoveClientPINVOKE.PSMDualShock4_DeviceSerial_get(swigCPtr);
      return ret;
    } 
  }

  public string AssignedHostSerial {
    get {
      string ret = PSMoveClientPINVOKE.PSMDualShock4_AssignedHostSerial_get(swigCPtr);
      return ret;
    } 
  }

  public bool PairedToHost {
    get {
      bool ret = PSMoveClientPINVOKE.PSMDualShock4_PairedToHost_get(swigCPtr);
      return ret;
    } 
  }

  public PSMConnectionType ConnectionType {
    get {
      PSMConnectionType ret = (PSMConnectionType)PSMoveClientPINVOKE.PSMDualShock4_ConnectionType_get(swigCPtr);
      return ret;
    } 
  }

  public PSMTrackingColorType TrackingColorType {
    get {
      PSMTrackingColorType ret = (PSMTrackingColorType)PSMoveClientPINVOKE.PSMDualShock4_TrackingColorType_get(swigCPtr);
      return ret;
    } 
  }

  public PSMPosef Pose {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMDualShock4_Pose_get(swigCPtr);
      PSMPosef ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMPosef(cPtr, false);
      return ret;
    } 
  }

  public PSMPhysicsData PhysicsData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMDualShock4_PhysicsData_get(swigCPtr);
      PSMPhysicsData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMPhysicsData(cPtr, false);
      return ret;
    } 
  }

  public PSMDS4RawSensorData RawSensorData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMDualShock4_RawSensorData_get(swigCPtr);
      PSMDS4RawSensorData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMDS4RawSensorData(cPtr, false);
      return ret;
    } 
  }

  public PSMDS4CalibratedSensorData CalibratedSensorData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMDualShock4_CalibratedSensorData_get(swigCPtr);
      PSMDS4CalibratedSensorData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMDS4CalibratedSensorData(cPtr, false);
      return ret;
    } 
  }

  public PSMRawTrackerData RawTrackerData {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMDualShock4_RawTrackerData_get(swigCPtr);
      PSMRawTrackerData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMRawTrackerData(cPtr, false);
      return ret;
    } 
  }

  public PSMButtonState DPadUpButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_DPadUpButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState DPadDownButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_DPadDownButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState DPadLeftButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_DPadLeftButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState DPadRightButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_DPadRightButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState SquareButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_SquareButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState CrossButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_CrossButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState CircleButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_CircleButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState TriangleButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_TriangleButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState L1Button {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_L1Button_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState R1Button {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_R1Button_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState L2Button {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_L2Button_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState R2Button {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_R2Button_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState L3Button {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_L3Button_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState R3Button {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_R3Button_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState ShareButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_ShareButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState OptionsButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_OptionsButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState PSButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_PSButton_get(swigCPtr);
      return ret;
    } 
  }

  public PSMButtonState TrackPadButton {
    get {
      PSMButtonState ret = (PSMButtonState)PSMoveClientPINVOKE.PSMDualShock4_TrackPadButton_get(swigCPtr);
      return ret;
    } 
  }

  public float LeftAnalogX {
    get {
      float ret = PSMoveClientPINVOKE.PSMDualShock4_LeftAnalogX_get(swigCPtr);
      return ret;
    } 
  }

  public float LeftAnalogY {
    get {
      float ret = PSMoveClientPINVOKE.PSMDualShock4_LeftAnalogY_get(swigCPtr);
      return ret;
    } 
  }

  public float RightAnalogX {
    get {
      float ret = PSMoveClientPINVOKE.PSMDualShock4_RightAnalogX_get(swigCPtr);
      return ret;
    } 
  }

  public float RightAnalogY {
    get {
      float ret = PSMoveClientPINVOKE.PSMDualShock4_RightAnalogY_get(swigCPtr);
      return ret;
    } 
  }

  public float LeftTriggerValue {
    get {
      float ret = PSMoveClientPINVOKE.PSMDualShock4_LeftTriggerValue_get(swigCPtr);
      return ret;
    } 
  }

  public float RightTriggerValue {
    get {
      float ret = PSMoveClientPINVOKE.PSMDualShock4_RightTriggerValue_get(swigCPtr);
      return ret;
    } 
  }

  public byte BigRumble {
    get {
      byte ret = PSMoveClientPINVOKE.PSMDualShock4_BigRumble_get(swigCPtr);
      return ret;
    } 
  }

  public byte SmallRumble {
    get {
      byte ret = PSMoveClientPINVOKE.PSMDualShock4_SmallRumble_get(swigCPtr);
      return ret;
    } 
  }

  public byte LED_r {
    get {
      byte ret = PSMoveClientPINVOKE.PSMDualShock4_LED_r_get(swigCPtr);
      return ret;
    } 
  }

  public byte LED_g {
    get {
      byte ret = PSMoveClientPINVOKE.PSMDualShock4_LED_g_get(swigCPtr);
      return ret;
    } 
  }

  public byte LED_b {
    get {
      byte ret = PSMoveClientPINVOKE.PSMDualShock4_LED_b_get(swigCPtr);
      return ret;
    } 
  }

  public long ResetPoseButtonPressTime {
    get {
      long ret = PSMoveClientPINVOKE.PSMDualShock4_ResetPoseButtonPressTime_get(swigCPtr);
      return ret;
    } 
  }

  public bool bResetPoseRequestSent {
    get {
      bool ret = PSMoveClientPINVOKE.PSMDualShock4_bResetPoseRequestSent_get(swigCPtr);
      return ret;
    } 
  }

  public bool bPoseResetButtonEnabled {
    get {
      bool ret = PSMoveClientPINVOKE.PSMDualShock4_bPoseResetButtonEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public PSMDualShock4() : this(PSMoveClientPINVOKE.new_PSMDualShock4(), true) {
  }

}

}
