//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PSMoveService {

public class PSMHeadMountedDisplay : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PSMHeadMountedDisplay(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PSMHeadMountedDisplay obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PSMHeadMountedDisplay() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PSMoveClientPINVOKE.delete_PSMHeadMountedDisplay(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int HmdID {
    get {
      int ret = PSMoveClientPINVOKE.PSMHeadMountedDisplay_HmdID_get(swigCPtr);
      return ret;
    } 
  }

  public PSMHmdType HmdType {
    get {
      PSMHmdType ret = (PSMHmdType)PSMoveClientPINVOKE.PSMHeadMountedDisplay_HmdType_get(swigCPtr);
      return ret;
    } 
  }

  public PSMHeadMountedDisplay_HmdState HmdState {
    get {
      global::System.IntPtr cPtr = PSMoveClientPINVOKE.PSMHeadMountedDisplay_HmdState_get(swigCPtr);
      PSMHeadMountedDisplay_HmdState ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSMHeadMountedDisplay_HmdState(cPtr, false);
      return ret;
    } 
  }

  public bool bValid {
    get {
      bool ret = PSMoveClientPINVOKE.PSMHeadMountedDisplay_bValid_get(swigCPtr);
      return ret;
    } 
  }

  public int OutputSequenceNum {
    get {
      int ret = PSMoveClientPINVOKE.PSMHeadMountedDisplay_OutputSequenceNum_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsConnected {
    get {
      bool ret = PSMoveClientPINVOKE.PSMHeadMountedDisplay_IsConnected_get(swigCPtr);
      return ret;
    } 
  }

  public long DataFrameLastReceivedTime {
    get {
      long ret = PSMoveClientPINVOKE.PSMHeadMountedDisplay_DataFrameLastReceivedTime_get(swigCPtr);
      return ret;
    } 
  }

  public float DataFrameAverageFPS {
    get {
      float ret = PSMoveClientPINVOKE.PSMHeadMountedDisplay_DataFrameAverageFPS_get(swigCPtr);
      return ret;
    } 
  }

  public int ListenerCount {
    get {
      int ret = PSMoveClientPINVOKE.PSMHeadMountedDisplay_ListenerCount_get(swigCPtr);
      return ret;
    } 
  }

  public PSMHeadMountedDisplay() : this(PSMoveClientPINVOKE.new_PSMHeadMountedDisplay(), true) {
  }

}

}
