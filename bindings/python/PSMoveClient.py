# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PSMoveClient')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PSMoveClient')
    _PSMoveClient = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PSMoveClient', [dirname(__file__)])
        except ImportError:
            import _PSMoveClient
            return _PSMoveClient
        try:
            _mod = imp.load_module('_PSMoveClient', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PSMoveClient = swig_import_helper()
    del swig_import_helper
else:
    import _PSMoveClient
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PSMOVESERVICE_DEFAULT_ADDRESS = _PSMoveClient.PSMOVESERVICE_DEFAULT_ADDRESS
PSMOVESERVICE_DEFAULT_PORT = _PSMoveClient.PSMOVESERVICE_DEFAULT_PORT
MAX_OUTPUT_DATA_FRAME_MESSAGE_SIZE = _PSMoveClient.MAX_OUTPUT_DATA_FRAME_MESSAGE_SIZE
MAX_INPUT_DATA_FRAME_MESSAGE_SIZE = _PSMoveClient.MAX_INPUT_DATA_FRAME_MESSAGE_SIZE
PSMOVESERVICE_MAX_CONTROLLER_COUNT = _PSMoveClient.PSMOVESERVICE_MAX_CONTROLLER_COUNT
PSMOVESERVICE_MAX_TRACKER_COUNT = _PSMoveClient.PSMOVESERVICE_MAX_TRACKER_COUNT
PSMOVESERVICE_MAX_HMD_COUNT = _PSMoveClient.PSMOVESERVICE_MAX_HMD_COUNT
PSM_MAX_VIRTUAL_CONTROLLER_AXES = _PSMoveClient.PSM_MAX_VIRTUAL_CONTROLLER_AXES
PSM_MAX_VIRTUAL_CONTROLLER_BUTTONS = _PSMoveClient.PSM_MAX_VIRTUAL_CONTROLLER_BUTTONS
PSM_DEFAULT_TIMEOUT = _PSMoveClient.PSM_DEFAULT_TIMEOUT
PSMOVESERVICE_CONTROLLER_SERIAL_LEN = _PSMoveClient.PSMOVESERVICE_CONTROLLER_SERIAL_LEN
PSMOVESERVICE_MAX_VERSION_STRING_LEN = _PSMoveClient.PSMOVESERVICE_MAX_VERSION_STRING_LEN
PSM_METERS_TO_CENTIMETERS = _PSMoveClient.PSM_METERS_TO_CENTIMETERS
PSM_CENTIMETERS_TO_METERS = _PSMoveClient.PSM_CENTIMETERS_TO_METERS
class PSMVector2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMVector2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMVector2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _PSMoveClient.PSMVector2f_x_set
    __swig_getmethods__["x"] = _PSMoveClient.PSMVector2f_x_get
    if _newclass:
        x = _swig_property(_PSMoveClient.PSMVector2f_x_get, _PSMoveClient.PSMVector2f_x_set)
    __swig_setmethods__["y"] = _PSMoveClient.PSMVector2f_y_set
    __swig_getmethods__["y"] = _PSMoveClient.PSMVector2f_y_get
    if _newclass:
        y = _swig_property(_PSMoveClient.PSMVector2f_y_get, _PSMoveClient.PSMVector2f_y_set)

    def __init__(self):
        this = _PSMoveClient.new_PSMVector2f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMVector2f
    __del__ = lambda self: None
PSMVector2f_swigregister = _PSMoveClient.PSMVector2f_swigregister
PSMVector2f_swigregister(PSMVector2f)

class PSMVector3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMVector3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMVector3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _PSMoveClient.PSMVector3f_x_set
    __swig_getmethods__["x"] = _PSMoveClient.PSMVector3f_x_get
    if _newclass:
        x = _swig_property(_PSMoveClient.PSMVector3f_x_get, _PSMoveClient.PSMVector3f_x_set)
    __swig_setmethods__["y"] = _PSMoveClient.PSMVector3f_y_set
    __swig_getmethods__["y"] = _PSMoveClient.PSMVector3f_y_get
    if _newclass:
        y = _swig_property(_PSMoveClient.PSMVector3f_y_get, _PSMoveClient.PSMVector3f_y_set)
    __swig_setmethods__["z"] = _PSMoveClient.PSMVector3f_z_set
    __swig_getmethods__["z"] = _PSMoveClient.PSMVector3f_z_get
    if _newclass:
        z = _swig_property(_PSMoveClient.PSMVector3f_z_get, _PSMoveClient.PSMVector3f_z_set)

    def __init__(self):
        this = _PSMoveClient.new_PSMVector3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMVector3f
    __del__ = lambda self: None
PSMVector3f_swigregister = _PSMoveClient.PSMVector3f_swigregister
PSMVector3f_swigregister(PSMVector3f)

class PSMVector3i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMVector3i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMVector3i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _PSMoveClient.PSMVector3i_x_set
    __swig_getmethods__["x"] = _PSMoveClient.PSMVector3i_x_get
    if _newclass:
        x = _swig_property(_PSMoveClient.PSMVector3i_x_get, _PSMoveClient.PSMVector3i_x_set)
    __swig_setmethods__["y"] = _PSMoveClient.PSMVector3i_y_set
    __swig_getmethods__["y"] = _PSMoveClient.PSMVector3i_y_get
    if _newclass:
        y = _swig_property(_PSMoveClient.PSMVector3i_y_get, _PSMoveClient.PSMVector3i_y_set)
    __swig_setmethods__["z"] = _PSMoveClient.PSMVector3i_z_set
    __swig_getmethods__["z"] = _PSMoveClient.PSMVector3i_z_get
    if _newclass:
        z = _swig_property(_PSMoveClient.PSMVector3i_z_get, _PSMoveClient.PSMVector3i_z_set)

    def __init__(self):
        this = _PSMoveClient.new_PSMVector3i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMVector3i
    __del__ = lambda self: None
PSMVector3i_swigregister = _PSMoveClient.PSMVector3i_swigregister
PSMVector3i_swigregister(PSMVector3i)

class PSMMatrix3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMMatrix3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMMatrix3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m00"] = _PSMoveClient.PSMMatrix3f_m00_set
    __swig_getmethods__["m00"] = _PSMoveClient.PSMMatrix3f_m00_get
    if _newclass:
        m00 = _swig_property(_PSMoveClient.PSMMatrix3f_m00_get, _PSMoveClient.PSMMatrix3f_m00_set)
    __swig_setmethods__["m01"] = _PSMoveClient.PSMMatrix3f_m01_set
    __swig_getmethods__["m01"] = _PSMoveClient.PSMMatrix3f_m01_get
    if _newclass:
        m01 = _swig_property(_PSMoveClient.PSMMatrix3f_m01_get, _PSMoveClient.PSMMatrix3f_m01_set)
    __swig_setmethods__["m02"] = _PSMoveClient.PSMMatrix3f_m02_set
    __swig_getmethods__["m02"] = _PSMoveClient.PSMMatrix3f_m02_get
    if _newclass:
        m02 = _swig_property(_PSMoveClient.PSMMatrix3f_m02_get, _PSMoveClient.PSMMatrix3f_m02_set)
    __swig_setmethods__["m10"] = _PSMoveClient.PSMMatrix3f_m10_set
    __swig_getmethods__["m10"] = _PSMoveClient.PSMMatrix3f_m10_get
    if _newclass:
        m10 = _swig_property(_PSMoveClient.PSMMatrix3f_m10_get, _PSMoveClient.PSMMatrix3f_m10_set)
    __swig_setmethods__["m11"] = _PSMoveClient.PSMMatrix3f_m11_set
    __swig_getmethods__["m11"] = _PSMoveClient.PSMMatrix3f_m11_get
    if _newclass:
        m11 = _swig_property(_PSMoveClient.PSMMatrix3f_m11_get, _PSMoveClient.PSMMatrix3f_m11_set)
    __swig_setmethods__["m12"] = _PSMoveClient.PSMMatrix3f_m12_set
    __swig_getmethods__["m12"] = _PSMoveClient.PSMMatrix3f_m12_get
    if _newclass:
        m12 = _swig_property(_PSMoveClient.PSMMatrix3f_m12_get, _PSMoveClient.PSMMatrix3f_m12_set)
    __swig_setmethods__["m20"] = _PSMoveClient.PSMMatrix3f_m20_set
    __swig_getmethods__["m20"] = _PSMoveClient.PSMMatrix3f_m20_get
    if _newclass:
        m20 = _swig_property(_PSMoveClient.PSMMatrix3f_m20_get, _PSMoveClient.PSMMatrix3f_m20_set)
    __swig_setmethods__["m21"] = _PSMoveClient.PSMMatrix3f_m21_set
    __swig_getmethods__["m21"] = _PSMoveClient.PSMMatrix3f_m21_get
    if _newclass:
        m21 = _swig_property(_PSMoveClient.PSMMatrix3f_m21_get, _PSMoveClient.PSMMatrix3f_m21_set)
    __swig_setmethods__["m22"] = _PSMoveClient.PSMMatrix3f_m22_set
    __swig_getmethods__["m22"] = _PSMoveClient.PSMMatrix3f_m22_get
    if _newclass:
        m22 = _swig_property(_PSMoveClient.PSMMatrix3f_m22_get, _PSMoveClient.PSMMatrix3f_m22_set)

    def __init__(self):
        this = _PSMoveClient.new_PSMMatrix3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMMatrix3f
    __del__ = lambda self: None
PSMMatrix3f_swigregister = _PSMoveClient.PSMMatrix3f_swigregister
PSMMatrix3f_swigregister(PSMMatrix3f)

class PSMQuatf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMQuatf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMQuatf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _PSMoveClient.PSMQuatf_w_set
    __swig_getmethods__["w"] = _PSMoveClient.PSMQuatf_w_get
    if _newclass:
        w = _swig_property(_PSMoveClient.PSMQuatf_w_get, _PSMoveClient.PSMQuatf_w_set)
    __swig_setmethods__["x"] = _PSMoveClient.PSMQuatf_x_set
    __swig_getmethods__["x"] = _PSMoveClient.PSMQuatf_x_get
    if _newclass:
        x = _swig_property(_PSMoveClient.PSMQuatf_x_get, _PSMoveClient.PSMQuatf_x_set)
    __swig_setmethods__["y"] = _PSMoveClient.PSMQuatf_y_set
    __swig_getmethods__["y"] = _PSMoveClient.PSMQuatf_y_get
    if _newclass:
        y = _swig_property(_PSMoveClient.PSMQuatf_y_get, _PSMoveClient.PSMQuatf_y_set)
    __swig_setmethods__["z"] = _PSMoveClient.PSMQuatf_z_set
    __swig_getmethods__["z"] = _PSMoveClient.PSMQuatf_z_get
    if _newclass:
        z = _swig_property(_PSMoveClient.PSMQuatf_z_get, _PSMoveClient.PSMQuatf_z_set)

    def __init__(self):
        this = _PSMoveClient.new_PSMQuatf()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMQuatf
    __del__ = lambda self: None
PSMQuatf_swigregister = _PSMoveClient.PSMQuatf_swigregister
PSMQuatf_swigregister(PSMQuatf)

class PSMPosef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMPosef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMPosef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Position"] = _PSMoveClient.PSMPosef_Position_set
    __swig_getmethods__["Position"] = _PSMoveClient.PSMPosef_Position_get
    if _newclass:
        Position = _swig_property(_PSMoveClient.PSMPosef_Position_get, _PSMoveClient.PSMPosef_Position_set)
    __swig_setmethods__["Orientation"] = _PSMoveClient.PSMPosef_Orientation_set
    __swig_getmethods__["Orientation"] = _PSMoveClient.PSMPosef_Orientation_get
    if _newclass:
        Orientation = _swig_property(_PSMoveClient.PSMPosef_Orientation_get, _PSMoveClient.PSMPosef_Orientation_set)

    def __init__(self):
        this = _PSMoveClient.new_PSMPosef()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMPosef
    __del__ = lambda self: None
PSMPosef_swigregister = _PSMoveClient.PSMPosef_swigregister
PSMPosef_swigregister(PSMPosef)

class PSMFrustum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMFrustum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMFrustum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin"] = _PSMoveClient.PSMFrustum_origin_set
    __swig_getmethods__["origin"] = _PSMoveClient.PSMFrustum_origin_get
    if _newclass:
        origin = _swig_property(_PSMoveClient.PSMFrustum_origin_get, _PSMoveClient.PSMFrustum_origin_set)
    __swig_setmethods__["forward"] = _PSMoveClient.PSMFrustum_forward_set
    __swig_getmethods__["forward"] = _PSMoveClient.PSMFrustum_forward_get
    if _newclass:
        forward = _swig_property(_PSMoveClient.PSMFrustum_forward_get, _PSMoveClient.PSMFrustum_forward_set)
    __swig_setmethods__["left"] = _PSMoveClient.PSMFrustum_left_set
    __swig_getmethods__["left"] = _PSMoveClient.PSMFrustum_left_get
    if _newclass:
        left = _swig_property(_PSMoveClient.PSMFrustum_left_get, _PSMoveClient.PSMFrustum_left_set)
    __swig_setmethods__["up"] = _PSMoveClient.PSMFrustum_up_set
    __swig_getmethods__["up"] = _PSMoveClient.PSMFrustum_up_get
    if _newclass:
        up = _swig_property(_PSMoveClient.PSMFrustum_up_get, _PSMoveClient.PSMFrustum_up_set)
    __swig_setmethods__["HFOV"] = _PSMoveClient.PSMFrustum_HFOV_set
    __swig_getmethods__["HFOV"] = _PSMoveClient.PSMFrustum_HFOV_get
    if _newclass:
        HFOV = _swig_property(_PSMoveClient.PSMFrustum_HFOV_get, _PSMoveClient.PSMFrustum_HFOV_set)
    __swig_setmethods__["VFOV"] = _PSMoveClient.PSMFrustum_VFOV_set
    __swig_getmethods__["VFOV"] = _PSMoveClient.PSMFrustum_VFOV_get
    if _newclass:
        VFOV = _swig_property(_PSMoveClient.PSMFrustum_VFOV_get, _PSMoveClient.PSMFrustum_VFOV_set)
    __swig_setmethods__["zNear"] = _PSMoveClient.PSMFrustum_zNear_set
    __swig_getmethods__["zNear"] = _PSMoveClient.PSMFrustum_zNear_get
    if _newclass:
        zNear = _swig_property(_PSMoveClient.PSMFrustum_zNear_get, _PSMoveClient.PSMFrustum_zNear_set)
    __swig_setmethods__["zFar"] = _PSMoveClient.PSMFrustum_zFar_set
    __swig_getmethods__["zFar"] = _PSMoveClient.PSMFrustum_zFar_get
    if _newclass:
        zFar = _swig_property(_PSMoveClient.PSMFrustum_zFar_get, _PSMoveClient.PSMFrustum_zFar_set)

    def __init__(self):
        this = _PSMoveClient.new_PSMFrustum()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMFrustum
    __del__ = lambda self: None
PSMFrustum_swigregister = _PSMoveClient.PSMFrustum_swigregister
PSMFrustum_swigregister(PSMFrustum)


def PSM_Vector2fAdd(a, b):
    return _PSMoveClient.PSM_Vector2fAdd(a, b)
PSM_Vector2fAdd = _PSMoveClient.PSM_Vector2fAdd

def PSM_Vector2fSubtract(a, b):
    return _PSMoveClient.PSM_Vector2fSubtract(a, b)
PSM_Vector2fSubtract = _PSMoveClient.PSM_Vector2fSubtract

def PSM_Vector2fScale(v, s):
    return _PSMoveClient.PSM_Vector2fScale(v, s)
PSM_Vector2fScale = _PSMoveClient.PSM_Vector2fScale

def PSM_Vector2fScaleAndAdd(v, s, b):
    return _PSMoveClient.PSM_Vector2fScaleAndAdd(v, s, b)
PSM_Vector2fScaleAndAdd = _PSMoveClient.PSM_Vector2fScaleAndAdd

def PSM_Vector2fUnsafeScalarDivide(numerator, divisor):
    return _PSMoveClient.PSM_Vector2fUnsafeScalarDivide(numerator, divisor)
PSM_Vector2fUnsafeScalarDivide = _PSMoveClient.PSM_Vector2fUnsafeScalarDivide

def PSM_Vector2fUnsafeVectorDivide(numerator, divisor):
    return _PSMoveClient.PSM_Vector2fUnsafeVectorDivide(numerator, divisor)
PSM_Vector2fUnsafeVectorDivide = _PSMoveClient.PSM_Vector2fUnsafeVectorDivide

def PSM_Vector2fSafeScalarDivide(numerator, divisor, default_result):
    return _PSMoveClient.PSM_Vector2fSafeScalarDivide(numerator, divisor, default_result)
PSM_Vector2fSafeScalarDivide = _PSMoveClient.PSM_Vector2fSafeScalarDivide

def PSM_Vector2fSafeVectorDivide(numerator, divisor, default_result):
    return _PSMoveClient.PSM_Vector2fSafeVectorDivide(numerator, divisor, default_result)
PSM_Vector2fSafeVectorDivide = _PSMoveClient.PSM_Vector2fSafeVectorDivide

def PSM_Vector2fAbs(v):
    return _PSMoveClient.PSM_Vector2fAbs(v)
PSM_Vector2fAbs = _PSMoveClient.PSM_Vector2fAbs

def PSM_Vector2fSquare(v):
    return _PSMoveClient.PSM_Vector2fSquare(v)
PSM_Vector2fSquare = _PSMoveClient.PSM_Vector2fSquare

def PSM_Vector2fLength(v):
    return _PSMoveClient.PSM_Vector2fLength(v)
PSM_Vector2fLength = _PSMoveClient.PSM_Vector2fLength

def PSM_Vector2fNormalizeWithDefault(v, default_result):
    return _PSMoveClient.PSM_Vector2fNormalizeWithDefault(v, default_result)
PSM_Vector2fNormalizeWithDefault = _PSMoveClient.PSM_Vector2fNormalizeWithDefault

def PSM_Vector2fMinValue(v):
    return _PSMoveClient.PSM_Vector2fMinValue(v)
PSM_Vector2fMinValue = _PSMoveClient.PSM_Vector2fMinValue

def PSM_Vector2fMaxValue(v):
    return _PSMoveClient.PSM_Vector2fMaxValue(v)
PSM_Vector2fMaxValue = _PSMoveClient.PSM_Vector2fMaxValue

def PSM_Vector2fDot(a, b):
    return _PSMoveClient.PSM_Vector2fDot(a, b)
PSM_Vector2fDot = _PSMoveClient.PSM_Vector2fDot

def PSM_Vector2fMin(a, b):
    return _PSMoveClient.PSM_Vector2fMin(a, b)
PSM_Vector2fMin = _PSMoveClient.PSM_Vector2fMin

def PSM_Vector2fMax(a, b):
    return _PSMoveClient.PSM_Vector2fMax(a, b)
PSM_Vector2fMax = _PSMoveClient.PSM_Vector2fMax

def PSM_Vector3fAdd(a, b):
    return _PSMoveClient.PSM_Vector3fAdd(a, b)
PSM_Vector3fAdd = _PSMoveClient.PSM_Vector3fAdd

def PSM_Vector3fSubtract(a, b):
    return _PSMoveClient.PSM_Vector3fSubtract(a, b)
PSM_Vector3fSubtract = _PSMoveClient.PSM_Vector3fSubtract

def PSM_Vector3fScale(v, s):
    return _PSMoveClient.PSM_Vector3fScale(v, s)
PSM_Vector3fScale = _PSMoveClient.PSM_Vector3fScale

def PSM_Vector3fScaleAndAdd(v, s, b):
    return _PSMoveClient.PSM_Vector3fScaleAndAdd(v, s, b)
PSM_Vector3fScaleAndAdd = _PSMoveClient.PSM_Vector3fScaleAndAdd

def PSM_Vector3fUnsafeScalarDivide(numerator, divisor):
    return _PSMoveClient.PSM_Vector3fUnsafeScalarDivide(numerator, divisor)
PSM_Vector3fUnsafeScalarDivide = _PSMoveClient.PSM_Vector3fUnsafeScalarDivide

def PSM_Vector3fUnsafeVectorDivide(numerator, divisor):
    return _PSMoveClient.PSM_Vector3fUnsafeVectorDivide(numerator, divisor)
PSM_Vector3fUnsafeVectorDivide = _PSMoveClient.PSM_Vector3fUnsafeVectorDivide

def PSM_Vector3fSafeScalarDivide(numerator, divisor, default_result):
    return _PSMoveClient.PSM_Vector3fSafeScalarDivide(numerator, divisor, default_result)
PSM_Vector3fSafeScalarDivide = _PSMoveClient.PSM_Vector3fSafeScalarDivide

def PSM_Vector3fSafeVectorDivide(numerator, divisor, default_result):
    return _PSMoveClient.PSM_Vector3fSafeVectorDivide(numerator, divisor, default_result)
PSM_Vector3fSafeVectorDivide = _PSMoveClient.PSM_Vector3fSafeVectorDivide

def PSM_Vector3fAbs(v):
    return _PSMoveClient.PSM_Vector3fAbs(v)
PSM_Vector3fAbs = _PSMoveClient.PSM_Vector3fAbs

def PSM_Vector3fSquare(v):
    return _PSMoveClient.PSM_Vector3fSquare(v)
PSM_Vector3fSquare = _PSMoveClient.PSM_Vector3fSquare

def PSM_Vector3fLength(v):
    return _PSMoveClient.PSM_Vector3fLength(v)
PSM_Vector3fLength = _PSMoveClient.PSM_Vector3fLength

def PSM_Vector3fNormalizeWithDefault(v, default_result):
    return _PSMoveClient.PSM_Vector3fNormalizeWithDefault(v, default_result)
PSM_Vector3fNormalizeWithDefault = _PSMoveClient.PSM_Vector3fNormalizeWithDefault

def PSM_Vector3fNormalizeWithDefaultGetLength(v, default_result, out_length):
    return _PSMoveClient.PSM_Vector3fNormalizeWithDefaultGetLength(v, default_result, out_length)
PSM_Vector3fNormalizeWithDefaultGetLength = _PSMoveClient.PSM_Vector3fNormalizeWithDefaultGetLength

def PSM_Vector3fMinValue(v):
    return _PSMoveClient.PSM_Vector3fMinValue(v)
PSM_Vector3fMinValue = _PSMoveClient.PSM_Vector3fMinValue

def PSM_Vector3fMaxValue(v):
    return _PSMoveClient.PSM_Vector3fMaxValue(v)
PSM_Vector3fMaxValue = _PSMoveClient.PSM_Vector3fMaxValue

def PSM_Vector3fDot(a, b):
    return _PSMoveClient.PSM_Vector3fDot(a, b)
PSM_Vector3fDot = _PSMoveClient.PSM_Vector3fDot

def PSM_Vector3fCross(a, b):
    return _PSMoveClient.PSM_Vector3fCross(a, b)
PSM_Vector3fCross = _PSMoveClient.PSM_Vector3fCross

def PSM_Vector3fMin(a, b):
    return _PSMoveClient.PSM_Vector3fMin(a, b)
PSM_Vector3fMin = _PSMoveClient.PSM_Vector3fMin

def PSM_Vector3fMax(a, b):
    return _PSMoveClient.PSM_Vector3fMax(a, b)
PSM_Vector3fMax = _PSMoveClient.PSM_Vector3fMax

def PSM_Vector3iAdd(a, b):
    return _PSMoveClient.PSM_Vector3iAdd(a, b)
PSM_Vector3iAdd = _PSMoveClient.PSM_Vector3iAdd

def PSM_Vector3iSubtract(a, b):
    return _PSMoveClient.PSM_Vector3iSubtract(a, b)
PSM_Vector3iSubtract = _PSMoveClient.PSM_Vector3iSubtract

def PSM_Vector3iUnsafeScalarDivide(numerator, divisor):
    return _PSMoveClient.PSM_Vector3iUnsafeScalarDivide(numerator, divisor)
PSM_Vector3iUnsafeScalarDivide = _PSMoveClient.PSM_Vector3iUnsafeScalarDivide

def PSM_Vector3iUnsafeVectorDivide(numerator, divisor):
    return _PSMoveClient.PSM_Vector3iUnsafeVectorDivide(numerator, divisor)
PSM_Vector3iUnsafeVectorDivide = _PSMoveClient.PSM_Vector3iUnsafeVectorDivide

def PSM_Vector3iSafeScalarDivide(numerator, divisor, default_result):
    return _PSMoveClient.PSM_Vector3iSafeScalarDivide(numerator, divisor, default_result)
PSM_Vector3iSafeScalarDivide = _PSMoveClient.PSM_Vector3iSafeScalarDivide

def PSM_Vector3iSafeVectorDivide(numerator, divisor, default_result):
    return _PSMoveClient.PSM_Vector3iSafeVectorDivide(numerator, divisor, default_result)
PSM_Vector3iSafeVectorDivide = _PSMoveClient.PSM_Vector3iSafeVectorDivide

def PSM_Vector3iAbs(v):
    return _PSMoveClient.PSM_Vector3iAbs(v)
PSM_Vector3iAbs = _PSMoveClient.PSM_Vector3iAbs

def PSM_Vector3iSquare(v):
    return _PSMoveClient.PSM_Vector3iSquare(v)
PSM_Vector3iSquare = _PSMoveClient.PSM_Vector3iSquare

def PSM_Vector3iLengthSquared(v):
    return _PSMoveClient.PSM_Vector3iLengthSquared(v)
PSM_Vector3iLengthSquared = _PSMoveClient.PSM_Vector3iLengthSquared

def PSM_Vector3iMinValue(v):
    return _PSMoveClient.PSM_Vector3iMinValue(v)
PSM_Vector3iMinValue = _PSMoveClient.PSM_Vector3iMinValue

def PSM_Vector3iMaxValue(v):
    return _PSMoveClient.PSM_Vector3iMaxValue(v)
PSM_Vector3iMaxValue = _PSMoveClient.PSM_Vector3iMaxValue

def PSM_Vector3iMin(a, b):
    return _PSMoveClient.PSM_Vector3iMin(a, b)
PSM_Vector3iMin = _PSMoveClient.PSM_Vector3iMin

def PSM_Vector3iMax(a, b):
    return _PSMoveClient.PSM_Vector3iMax(a, b)
PSM_Vector3iMax = _PSMoveClient.PSM_Vector3iMax

def PSM_Vector3iCastToFloat(v):
    return _PSMoveClient.PSM_Vector3iCastToFloat(v)
PSM_Vector3iCastToFloat = _PSMoveClient.PSM_Vector3iCastToFloat

def PSM_QuatfCreate(w, x, y, z):
    return _PSMoveClient.PSM_QuatfCreate(w, x, y, z)
PSM_QuatfCreate = _PSMoveClient.PSM_QuatfCreate

def PSM_QuatfCreateFromAngles(eulerAngles):
    return _PSMoveClient.PSM_QuatfCreateFromAngles(eulerAngles)
PSM_QuatfCreateFromAngles = _PSMoveClient.PSM_QuatfCreateFromAngles

def PSM_QuatfAdd(a, b):
    return _PSMoveClient.PSM_QuatfAdd(a, b)
PSM_QuatfAdd = _PSMoveClient.PSM_QuatfAdd

def PSM_QuatfScale(q, s):
    return _PSMoveClient.PSM_QuatfScale(q, s)
PSM_QuatfScale = _PSMoveClient.PSM_QuatfScale

def PSM_QuatfMultiply(a, b):
    return _PSMoveClient.PSM_QuatfMultiply(a, b)
PSM_QuatfMultiply = _PSMoveClient.PSM_QuatfMultiply

def PSM_QuatfUnsafeScalarDivide(q, s):
    return _PSMoveClient.PSM_QuatfUnsafeScalarDivide(q, s)
PSM_QuatfUnsafeScalarDivide = _PSMoveClient.PSM_QuatfUnsafeScalarDivide

def PSM_QuatfSafeScalarDivide(q, s, default_result):
    return _PSMoveClient.PSM_QuatfSafeScalarDivide(q, s, default_result)
PSM_QuatfSafeScalarDivide = _PSMoveClient.PSM_QuatfSafeScalarDivide

def PSM_QuatfConjugate(q):
    return _PSMoveClient.PSM_QuatfConjugate(q)
PSM_QuatfConjugate = _PSMoveClient.PSM_QuatfConjugate

def PSM_QuatfConcat(first, second):
    return _PSMoveClient.PSM_QuatfConcat(first, second)
PSM_QuatfConcat = _PSMoveClient.PSM_QuatfConcat

def PSM_QuatfRotateVector(q, v):
    return _PSMoveClient.PSM_QuatfRotateVector(q, v)
PSM_QuatfRotateVector = _PSMoveClient.PSM_QuatfRotateVector

def PSM_QuatfLength(q):
    return _PSMoveClient.PSM_QuatfLength(q)
PSM_QuatfLength = _PSMoveClient.PSM_QuatfLength

def PSM_QuatfNormalizeWithDefault(q, default_result):
    return _PSMoveClient.PSM_QuatfNormalizeWithDefault(q, default_result)
PSM_QuatfNormalizeWithDefault = _PSMoveClient.PSM_QuatfNormalizeWithDefault

def PSM_Matrix3fCreate(basis_x, basis_y, basis_z):
    return _PSMoveClient.PSM_Matrix3fCreate(basis_x, basis_y, basis_z)
PSM_Matrix3fCreate = _PSMoveClient.PSM_Matrix3fCreate

def PSM_Matrix3fCreateFromQuatf(q):
    return _PSMoveClient.PSM_Matrix3fCreateFromQuatf(q)
PSM_Matrix3fCreateFromQuatf = _PSMoveClient.PSM_Matrix3fCreateFromQuatf

def PSM_Matrix3fBasisX(m):
    return _PSMoveClient.PSM_Matrix3fBasisX(m)
PSM_Matrix3fBasisX = _PSMoveClient.PSM_Matrix3fBasisX

def PSM_Matrix3fBasisY(m):
    return _PSMoveClient.PSM_Matrix3fBasisY(m)
PSM_Matrix3fBasisY = _PSMoveClient.PSM_Matrix3fBasisY

def PSM_Matrix3fBasisZ(m):
    return _PSMoveClient.PSM_Matrix3fBasisZ(m)
PSM_Matrix3fBasisZ = _PSMoveClient.PSM_Matrix3fBasisZ

def PSM_PosefCreate(position, orientation):
    return _PSMoveClient.PSM_PosefCreate(position, orientation)
PSM_PosefCreate = _PSMoveClient.PSM_PosefCreate

def PSM_PosefInverse(pose):
    return _PSMoveClient.PSM_PosefInverse(pose)
PSM_PosefInverse = _PSMoveClient.PSM_PosefInverse

def PSM_PosefConcat(first, second):
    return _PSMoveClient.PSM_PosefConcat(first, second)
PSM_PosefConcat = _PSMoveClient.PSM_PosefConcat

def PSM_PosefTransformPoint(pose, p):
    return _PSMoveClient.PSM_PosefTransformPoint(pose, p)
PSM_PosefTransformPoint = _PSMoveClient.PSM_PosefTransformPoint

def PSM_PosefInverseTransformPoint(pose, p):
    return _PSMoveClient.PSM_PosefInverseTransformPoint(pose, p)
PSM_PosefInverseTransformPoint = _PSMoveClient.PSM_PosefInverseTransformPoint

def PSM_FrustumSetPose(frustum, pose):
    return _PSMoveClient.PSM_FrustumSetPose(frustum, pose)
PSM_FrustumSetPose = _PSMoveClient.PSM_FrustumSetPose
PSMResult_Error = _PSMoveClient.PSMResult_Error
PSMResult_Success = _PSMoveClient.PSMResult_Success
PSMResult_Timeout = _PSMoveClient.PSMResult_Timeout
PSMResult_RequestSent = _PSMoveClient.PSMResult_RequestSent
PSMResult_Canceled = _PSMoveClient.PSMResult_Canceled
PSMResult_NoData = _PSMoveClient.PSMResult_NoData
PSMConnectionType_BLUETOOTH = _PSMoveClient.PSMConnectionType_BLUETOOTH
PSMConnectionType_USB = _PSMoveClient.PSMConnectionType_USB
PSMButtonState_UP = _PSMoveClient.PSMButtonState_UP
PSMButtonState_PRESSED = _PSMoveClient.PSMButtonState_PRESSED
PSMButtonState_DOWN = _PSMoveClient.PSMButtonState_DOWN
PSMButtonState_RELEASED = _PSMoveClient.PSMButtonState_RELEASED
PSMTrackingColorType_Magenta = _PSMoveClient.PSMTrackingColorType_Magenta
PSMTrackingColorType_Cyan = _PSMoveClient.PSMTrackingColorType_Cyan
PSMTrackingColorType_Yellow = _PSMoveClient.PSMTrackingColorType_Yellow
PSMTrackingColorType_Red = _PSMoveClient.PSMTrackingColorType_Red
PSMTrackingColorType_Green = _PSMoveClient.PSMTrackingColorType_Green
PSMTrackingColorType_Blue = _PSMoveClient.PSMTrackingColorType_Blue
PSMTrackingColorType_MaxColorTypes = _PSMoveClient.PSMTrackingColorType_MaxColorTypes
PSMBattery_0 = _PSMoveClient.PSMBattery_0
PSMBattery_20 = _PSMoveClient.PSMBattery_20
PSMBattery_40 = _PSMoveClient.PSMBattery_40
PSMBattery_60 = _PSMoveClient.PSMBattery_60
PSMBattery_80 = _PSMoveClient.PSMBattery_80
PSMBattery_100 = _PSMoveClient.PSMBattery_100
PSMBattery_Charging = _PSMoveClient.PSMBattery_Charging
PSMBattery_Charged = _PSMoveClient.PSMBattery_Charged
PSMStreamFlags_defaultStreamOptions = _PSMoveClient.PSMStreamFlags_defaultStreamOptions
PSMStreamFlags_includePositionData = _PSMoveClient.PSMStreamFlags_includePositionData
PSMStreamFlags_includePhysicsData = _PSMoveClient.PSMStreamFlags_includePhysicsData
PSMStreamFlags_includeRawSensorData = _PSMoveClient.PSMStreamFlags_includeRawSensorData
PSMStreamFlags_includeCalibratedSensorData = _PSMoveClient.PSMStreamFlags_includeCalibratedSensorData
PSMStreamFlags_includeRawTrackerData = _PSMoveClient.PSMStreamFlags_includeRawTrackerData
PSMStreamFlags_disableROI = _PSMoveClient.PSMStreamFlags_disableROI
PSMControllerRumbleChannel_All = _PSMoveClient.PSMControllerRumbleChannel_All
PSMControllerRumbleChannel_Left = _PSMoveClient.PSMControllerRumbleChannel_Left
PSMControllerRumbleChannel_Right = _PSMoveClient.PSMControllerRumbleChannel_Right
PSMController_None = _PSMoveClient.PSMController_None
PSMController_Move = _PSMoveClient.PSMController_Move
PSMController_Navi = _PSMoveClient.PSMController_Navi
PSMController_DualShock4 = _PSMoveClient.PSMController_DualShock4
PSMController_Virtual = _PSMoveClient.PSMController_Virtual
PSMControllerHand_Any = _PSMoveClient.PSMControllerHand_Any
PSMControllerHand_Left = _PSMoveClient.PSMControllerHand_Left
PSMControllerHand_Right = _PSMoveClient.PSMControllerHand_Right
PSMTracker_None = _PSMoveClient.PSMTracker_None
PSMTracker_PS3Eye = _PSMoveClient.PSMTracker_PS3Eye
PSMHmd_None = _PSMoveClient.PSMHmd_None
PSMHmd_Morpheus = _PSMoveClient.PSMHmd_Morpheus
PSMHmd_Virtual = _PSMoveClient.PSMHmd_Virtual
PSMDriver_LIBUSB = _PSMoveClient.PSMDriver_LIBUSB
PSMDriver_CL_EYE = _PSMoveClient.PSMDriver_CL_EYE
PSMDriver_CL_EYE_MULTICAM = _PSMoveClient.PSMDriver_CL_EYE_MULTICAM
PSMDriver_GENERIC_WEBCAM = _PSMoveClient.PSMDriver_GENERIC_WEBCAM
class PSMClientControllerInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMClientControllerInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMClientControllerInfo, name)
    __repr__ = _swig_repr
    __swig_getmethods__["controller_id"] = _PSMoveClient.PSMClientControllerInfo_controller_id_get
    if _newclass:
        controller_id = _swig_property(_PSMoveClient.PSMClientControllerInfo_controller_id_get)
    __swig_getmethods__["controller_type"] = _PSMoveClient.PSMClientControllerInfo_controller_type_get
    if _newclass:
        controller_type = _swig_property(_PSMoveClient.PSMClientControllerInfo_controller_type_get)
    __swig_getmethods__["controller_hand"] = _PSMoveClient.PSMClientControllerInfo_controller_hand_get
    if _newclass:
        controller_hand = _swig_property(_PSMoveClient.PSMClientControllerInfo_controller_hand_get)
    __swig_getmethods__["tracking_color_type"] = _PSMoveClient.PSMClientControllerInfo_tracking_color_type_get
    if _newclass:
        tracking_color_type = _swig_property(_PSMoveClient.PSMClientControllerInfo_tracking_color_type_get)
    __swig_getmethods__["is_bluetooth"] = _PSMoveClient.PSMClientControllerInfo_is_bluetooth_get
    if _newclass:
        is_bluetooth = _swig_property(_PSMoveClient.PSMClientControllerInfo_is_bluetooth_get)
    __swig_getmethods__["has_magnetometer"] = _PSMoveClient.PSMClientControllerInfo_has_magnetometer_get
    if _newclass:
        has_magnetometer = _swig_property(_PSMoveClient.PSMClientControllerInfo_has_magnetometer_get)
    __swig_getmethods__["prediction_time"] = _PSMoveClient.PSMClientControllerInfo_prediction_time_get
    if _newclass:
        prediction_time = _swig_property(_PSMoveClient.PSMClientControllerInfo_prediction_time_get)
    __swig_getmethods__["gamepad_index"] = _PSMoveClient.PSMClientControllerInfo_gamepad_index_get
    if _newclass:
        gamepad_index = _swig_property(_PSMoveClient.PSMClientControllerInfo_gamepad_index_get)
    __swig_getmethods__["device_path"] = _PSMoveClient.PSMClientControllerInfo_device_path_get
    if _newclass:
        device_path = _swig_property(_PSMoveClient.PSMClientControllerInfo_device_path_get)
    __swig_getmethods__["orientation_filter"] = _PSMoveClient.PSMClientControllerInfo_orientation_filter_get
    if _newclass:
        orientation_filter = _swig_property(_PSMoveClient.PSMClientControllerInfo_orientation_filter_get)
    __swig_getmethods__["position_filter"] = _PSMoveClient.PSMClientControllerInfo_position_filter_get
    if _newclass:
        position_filter = _swig_property(_PSMoveClient.PSMClientControllerInfo_position_filter_get)
    __swig_getmethods__["gyro_gain_setting"] = _PSMoveClient.PSMClientControllerInfo_gyro_gain_setting_get
    if _newclass:
        gyro_gain_setting = _swig_property(_PSMoveClient.PSMClientControllerInfo_gyro_gain_setting_get)
    __swig_getmethods__["controller_serial"] = _PSMoveClient.PSMClientControllerInfo_controller_serial_get
    if _newclass:
        controller_serial = _swig_property(_PSMoveClient.PSMClientControllerInfo_controller_serial_get)
    __swig_getmethods__["assigned_host_serial"] = _PSMoveClient.PSMClientControllerInfo_assigned_host_serial_get
    if _newclass:
        assigned_host_serial = _swig_property(_PSMoveClient.PSMClientControllerInfo_assigned_host_serial_get)
    __swig_getmethods__["parent_controller_serial"] = _PSMoveClient.PSMClientControllerInfo_parent_controller_serial_get
    if _newclass:
        parent_controller_serial = _swig_property(_PSMoveClient.PSMClientControllerInfo_parent_controller_serial_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMClientControllerInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMClientControllerInfo
    __del__ = lambda self: None
PSMClientControllerInfo_swigregister = _PSMoveClient.PSMClientControllerInfo_swigregister
PSMClientControllerInfo_swigregister(PSMClientControllerInfo)
cvar = _PSMoveClient.cvar
PSM_INVALID_REQUEST_ID = cvar.PSM_INVALID_REQUEST_ID

class PSMPhysicsData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMPhysicsData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMPhysicsData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["LinearVelocityCmPerSec"] = _PSMoveClient.PSMPhysicsData_LinearVelocityCmPerSec_get
    if _newclass:
        LinearVelocityCmPerSec = _swig_property(_PSMoveClient.PSMPhysicsData_LinearVelocityCmPerSec_get)
    __swig_getmethods__["LinearAccelerationCmPerSecSqr"] = _PSMoveClient.PSMPhysicsData_LinearAccelerationCmPerSecSqr_get
    if _newclass:
        LinearAccelerationCmPerSecSqr = _swig_property(_PSMoveClient.PSMPhysicsData_LinearAccelerationCmPerSecSqr_get)
    __swig_getmethods__["AngularVelocityRadPerSec"] = _PSMoveClient.PSMPhysicsData_AngularVelocityRadPerSec_get
    if _newclass:
        AngularVelocityRadPerSec = _swig_property(_PSMoveClient.PSMPhysicsData_AngularVelocityRadPerSec_get)
    __swig_getmethods__["AngularAccelerationRadPerSecSqr"] = _PSMoveClient.PSMPhysicsData_AngularAccelerationRadPerSecSqr_get
    if _newclass:
        AngularAccelerationRadPerSecSqr = _swig_property(_PSMoveClient.PSMPhysicsData_AngularAccelerationRadPerSecSqr_get)
    __swig_getmethods__["TimeInSeconds"] = _PSMoveClient.PSMPhysicsData_TimeInSeconds_get
    if _newclass:
        TimeInSeconds = _swig_property(_PSMoveClient.PSMPhysicsData_TimeInSeconds_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMPhysicsData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMPhysicsData
    __del__ = lambda self: None
PSMPhysicsData_swigregister = _PSMoveClient.PSMPhysicsData_swigregister
PSMPhysicsData_swigregister(PSMPhysicsData)

class PSMPSMoveRawSensorData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMPSMoveRawSensorData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMPSMoveRawSensorData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Magnetometer"] = _PSMoveClient.PSMPSMoveRawSensorData_Magnetometer_get
    if _newclass:
        Magnetometer = _swig_property(_PSMoveClient.PSMPSMoveRawSensorData_Magnetometer_get)
    __swig_getmethods__["Accelerometer"] = _PSMoveClient.PSMPSMoveRawSensorData_Accelerometer_get
    if _newclass:
        Accelerometer = _swig_property(_PSMoveClient.PSMPSMoveRawSensorData_Accelerometer_get)
    __swig_getmethods__["Gyroscope"] = _PSMoveClient.PSMPSMoveRawSensorData_Gyroscope_get
    if _newclass:
        Gyroscope = _swig_property(_PSMoveClient.PSMPSMoveRawSensorData_Gyroscope_get)
    __swig_getmethods__["TimeInSeconds"] = _PSMoveClient.PSMPSMoveRawSensorData_TimeInSeconds_get
    if _newclass:
        TimeInSeconds = _swig_property(_PSMoveClient.PSMPSMoveRawSensorData_TimeInSeconds_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMPSMoveRawSensorData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMPSMoveRawSensorData
    __del__ = lambda self: None
PSMPSMoveRawSensorData_swigregister = _PSMoveClient.PSMPSMoveRawSensorData_swigregister
PSMPSMoveRawSensorData_swigregister(PSMPSMoveRawSensorData)

class PSMPSMoveCalibratedSensorData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMPSMoveCalibratedSensorData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMPSMoveCalibratedSensorData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Magnetometer"] = _PSMoveClient.PSMPSMoveCalibratedSensorData_Magnetometer_get
    if _newclass:
        Magnetometer = _swig_property(_PSMoveClient.PSMPSMoveCalibratedSensorData_Magnetometer_get)
    __swig_getmethods__["Accelerometer"] = _PSMoveClient.PSMPSMoveCalibratedSensorData_Accelerometer_get
    if _newclass:
        Accelerometer = _swig_property(_PSMoveClient.PSMPSMoveCalibratedSensorData_Accelerometer_get)
    __swig_getmethods__["Gyroscope"] = _PSMoveClient.PSMPSMoveCalibratedSensorData_Gyroscope_get
    if _newclass:
        Gyroscope = _swig_property(_PSMoveClient.PSMPSMoveCalibratedSensorData_Gyroscope_get)
    __swig_getmethods__["TimeInSeconds"] = _PSMoveClient.PSMPSMoveCalibratedSensorData_TimeInSeconds_get
    if _newclass:
        TimeInSeconds = _swig_property(_PSMoveClient.PSMPSMoveCalibratedSensorData_TimeInSeconds_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMPSMoveCalibratedSensorData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMPSMoveCalibratedSensorData
    __del__ = lambda self: None
PSMPSMoveCalibratedSensorData_swigregister = _PSMoveClient.PSMPSMoveCalibratedSensorData_swigregister
PSMPSMoveCalibratedSensorData_swigregister(PSMPSMoveCalibratedSensorData)

PSMShape_INVALID_PROJECTION = _PSMoveClient.PSMShape_INVALID_PROJECTION
PSMShape_Ellipse = _PSMoveClient.PSMShape_Ellipse
PSMShape_LightBar = _PSMoveClient.PSMShape_LightBar
PSMShape_PointCloud = _PSMoveClient.PSMShape_PointCloud
class PSMTrackingProjection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMTrackingProjection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMTrackingProjection, name)
    __repr__ = _swig_repr
    __swig_getmethods__["shape_type"] = _PSMoveClient.PSMTrackingProjection_shape_type_get
    if _newclass:
        shape_type = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_type_get)
    __swig_getmethods__["shape"] = _PSMoveClient.PSMTrackingProjection_shape_get
    if _newclass:
        shape = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMTrackingProjection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMTrackingProjection
    __del__ = lambda self: None
PSMTrackingProjection_swigregister = _PSMoveClient.PSMTrackingProjection_swigregister
PSMTrackingProjection_swigregister(PSMTrackingProjection)

class PSMTrackingProjection_shape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMTrackingProjection_shape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMTrackingProjection_shape, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ellipse"] = _PSMoveClient.PSMTrackingProjection_shape_ellipse_get
    if _newclass:
        ellipse = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_ellipse_get)
    __swig_getmethods__["lightbar"] = _PSMoveClient.PSMTrackingProjection_shape_lightbar_get
    if _newclass:
        lightbar = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_lightbar_get)
    __swig_getmethods__["pointcloud"] = _PSMoveClient.PSMTrackingProjection_shape_pointcloud_get
    if _newclass:
        pointcloud = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_pointcloud_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMTrackingProjection_shape()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMTrackingProjection_shape
    __del__ = lambda self: None
PSMTrackingProjection_shape_swigregister = _PSMoveClient.PSMTrackingProjection_shape_swigregister
PSMTrackingProjection_shape_swigregister(PSMTrackingProjection_shape)

class PSMTrackingProjection_shape_pointcloud(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMTrackingProjection_shape_pointcloud, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMTrackingProjection_shape_pointcloud, name)
    __repr__ = _swig_repr
    __swig_getmethods__["points"] = _PSMoveClient.PSMTrackingProjection_shape_pointcloud_points_get
    if _newclass:
        points = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_pointcloud_points_get)
    __swig_getmethods__["point_count"] = _PSMoveClient.PSMTrackingProjection_shape_pointcloud_point_count_get
    if _newclass:
        point_count = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_pointcloud_point_count_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMTrackingProjection_shape_pointcloud()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMTrackingProjection_shape_pointcloud
    __del__ = lambda self: None
PSMTrackingProjection_shape_pointcloud_swigregister = _PSMoveClient.PSMTrackingProjection_shape_pointcloud_swigregister
PSMTrackingProjection_shape_pointcloud_swigregister(PSMTrackingProjection_shape_pointcloud)

class PSMTrackingProjection_shape_lightbar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMTrackingProjection_shape_lightbar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMTrackingProjection_shape_lightbar, name)
    __repr__ = _swig_repr
    __swig_getmethods__["triangle"] = _PSMoveClient.PSMTrackingProjection_shape_lightbar_triangle_get
    if _newclass:
        triangle = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_lightbar_triangle_get)
    __swig_getmethods__["quad"] = _PSMoveClient.PSMTrackingProjection_shape_lightbar_quad_get
    if _newclass:
        quad = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_lightbar_quad_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMTrackingProjection_shape_lightbar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMTrackingProjection_shape_lightbar
    __del__ = lambda self: None
PSMTrackingProjection_shape_lightbar_swigregister = _PSMoveClient.PSMTrackingProjection_shape_lightbar_swigregister
PSMTrackingProjection_shape_lightbar_swigregister(PSMTrackingProjection_shape_lightbar)

class PSMTrackingProjection_shape_ellipse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMTrackingProjection_shape_ellipse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMTrackingProjection_shape_ellipse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["center"] = _PSMoveClient.PSMTrackingProjection_shape_ellipse_center_get
    if _newclass:
        center = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_ellipse_center_get)
    __swig_getmethods__["half_x_extent"] = _PSMoveClient.PSMTrackingProjection_shape_ellipse_half_x_extent_get
    if _newclass:
        half_x_extent = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_ellipse_half_x_extent_get)
    __swig_getmethods__["half_y_extent"] = _PSMoveClient.PSMTrackingProjection_shape_ellipse_half_y_extent_get
    if _newclass:
        half_y_extent = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_ellipse_half_y_extent_get)
    __swig_getmethods__["angle"] = _PSMoveClient.PSMTrackingProjection_shape_ellipse_angle_get
    if _newclass:
        angle = _swig_property(_PSMoveClient.PSMTrackingProjection_shape_ellipse_angle_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMTrackingProjection_shape_ellipse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMTrackingProjection_shape_ellipse
    __del__ = lambda self: None
PSMTrackingProjection_shape_ellipse_swigregister = _PSMoveClient.PSMTrackingProjection_shape_ellipse_swigregister
PSMTrackingProjection_shape_ellipse_swigregister(PSMTrackingProjection_shape_ellipse)

class PSMRawTrackerData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMRawTrackerData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMRawTrackerData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["TrackerID"] = _PSMoveClient.PSMRawTrackerData_TrackerID_get
    if _newclass:
        TrackerID = _swig_property(_PSMoveClient.PSMRawTrackerData_TrackerID_get)
    __swig_getmethods__["ScreenLocation"] = _PSMoveClient.PSMRawTrackerData_ScreenLocation_get
    if _newclass:
        ScreenLocation = _swig_property(_PSMoveClient.PSMRawTrackerData_ScreenLocation_get)
    __swig_getmethods__["RelativePositionCm"] = _PSMoveClient.PSMRawTrackerData_RelativePositionCm_get
    if _newclass:
        RelativePositionCm = _swig_property(_PSMoveClient.PSMRawTrackerData_RelativePositionCm_get)
    __swig_getmethods__["RelativeOrientation"] = _PSMoveClient.PSMRawTrackerData_RelativeOrientation_get
    if _newclass:
        RelativeOrientation = _swig_property(_PSMoveClient.PSMRawTrackerData_RelativeOrientation_get)
    __swig_getmethods__["TrackingProjection"] = _PSMoveClient.PSMRawTrackerData_TrackingProjection_get
    if _newclass:
        TrackingProjection = _swig_property(_PSMoveClient.PSMRawTrackerData_TrackingProjection_get)
    __swig_getmethods__["ValidTrackerBitmask"] = _PSMoveClient.PSMRawTrackerData_ValidTrackerBitmask_get
    if _newclass:
        ValidTrackerBitmask = _swig_property(_PSMoveClient.PSMRawTrackerData_ValidTrackerBitmask_get)
    __swig_getmethods__["MulticamPositionCm"] = _PSMoveClient.PSMRawTrackerData_MulticamPositionCm_get
    if _newclass:
        MulticamPositionCm = _swig_property(_PSMoveClient.PSMRawTrackerData_MulticamPositionCm_get)
    __swig_getmethods__["MulticamOrientation"] = _PSMoveClient.PSMRawTrackerData_MulticamOrientation_get
    if _newclass:
        MulticamOrientation = _swig_property(_PSMoveClient.PSMRawTrackerData_MulticamOrientation_get)
    __swig_getmethods__["bMulticamPositionValid"] = _PSMoveClient.PSMRawTrackerData_bMulticamPositionValid_get
    if _newclass:
        bMulticamPositionValid = _swig_property(_PSMoveClient.PSMRawTrackerData_bMulticamPositionValid_get)
    __swig_getmethods__["bMulticamOrientationValid"] = _PSMoveClient.PSMRawTrackerData_bMulticamOrientationValid_get
    if _newclass:
        bMulticamOrientationValid = _swig_property(_PSMoveClient.PSMRawTrackerData_bMulticamOrientationValid_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMRawTrackerData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMRawTrackerData
    __del__ = lambda self: None
PSMRawTrackerData_swigregister = _PSMoveClient.PSMRawTrackerData_swigregister
PSMRawTrackerData_swigregister(PSMRawTrackerData)

class PSMPSMove(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMPSMove, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMPSMove, name)
    __repr__ = _swig_repr
    __swig_getmethods__["bHasValidHardwareCalibration"] = _PSMoveClient.PSMPSMove_bHasValidHardwareCalibration_get
    if _newclass:
        bHasValidHardwareCalibration = _swig_property(_PSMoveClient.PSMPSMove_bHasValidHardwareCalibration_get)
    __swig_getmethods__["bIsTrackingEnabled"] = _PSMoveClient.PSMPSMove_bIsTrackingEnabled_get
    if _newclass:
        bIsTrackingEnabled = _swig_property(_PSMoveClient.PSMPSMove_bIsTrackingEnabled_get)
    __swig_getmethods__["bIsCurrentlyTracking"] = _PSMoveClient.PSMPSMove_bIsCurrentlyTracking_get
    if _newclass:
        bIsCurrentlyTracking = _swig_property(_PSMoveClient.PSMPSMove_bIsCurrentlyTracking_get)
    __swig_getmethods__["bIsOrientationValid"] = _PSMoveClient.PSMPSMove_bIsOrientationValid_get
    if _newclass:
        bIsOrientationValid = _swig_property(_PSMoveClient.PSMPSMove_bIsOrientationValid_get)
    __swig_getmethods__["bIsPositionValid"] = _PSMoveClient.PSMPSMove_bIsPositionValid_get
    if _newclass:
        bIsPositionValid = _swig_property(_PSMoveClient.PSMPSMove_bIsPositionValid_get)
    __swig_getmethods__["bHasUnpublishedState"] = _PSMoveClient.PSMPSMove_bHasUnpublishedState_get
    if _newclass:
        bHasUnpublishedState = _swig_property(_PSMoveClient.PSMPSMove_bHasUnpublishedState_get)
    __swig_getmethods__["DevicePath"] = _PSMoveClient.PSMPSMove_DevicePath_get
    if _newclass:
        DevicePath = _swig_property(_PSMoveClient.PSMPSMove_DevicePath_get)
    __swig_getmethods__["DeviceSerial"] = _PSMoveClient.PSMPSMove_DeviceSerial_get
    if _newclass:
        DeviceSerial = _swig_property(_PSMoveClient.PSMPSMove_DeviceSerial_get)
    __swig_getmethods__["AssignedHostSerial"] = _PSMoveClient.PSMPSMove_AssignedHostSerial_get
    if _newclass:
        AssignedHostSerial = _swig_property(_PSMoveClient.PSMPSMove_AssignedHostSerial_get)
    __swig_getmethods__["PairedToHost"] = _PSMoveClient.PSMPSMove_PairedToHost_get
    if _newclass:
        PairedToHost = _swig_property(_PSMoveClient.PSMPSMove_PairedToHost_get)
    __swig_getmethods__["ConnectionType"] = _PSMoveClient.PSMPSMove_ConnectionType_get
    if _newclass:
        ConnectionType = _swig_property(_PSMoveClient.PSMPSMove_ConnectionType_get)
    __swig_getmethods__["TrackingColorType"] = _PSMoveClient.PSMPSMove_TrackingColorType_get
    if _newclass:
        TrackingColorType = _swig_property(_PSMoveClient.PSMPSMove_TrackingColorType_get)
    __swig_getmethods__["Pose"] = _PSMoveClient.PSMPSMove_Pose_get
    if _newclass:
        Pose = _swig_property(_PSMoveClient.PSMPSMove_Pose_get)
    __swig_getmethods__["PhysicsData"] = _PSMoveClient.PSMPSMove_PhysicsData_get
    if _newclass:
        PhysicsData = _swig_property(_PSMoveClient.PSMPSMove_PhysicsData_get)
    __swig_getmethods__["RawSensorData"] = _PSMoveClient.PSMPSMove_RawSensorData_get
    if _newclass:
        RawSensorData = _swig_property(_PSMoveClient.PSMPSMove_RawSensorData_get)
    __swig_getmethods__["CalibratedSensorData"] = _PSMoveClient.PSMPSMove_CalibratedSensorData_get
    if _newclass:
        CalibratedSensorData = _swig_property(_PSMoveClient.PSMPSMove_CalibratedSensorData_get)
    __swig_getmethods__["RawTrackerData"] = _PSMoveClient.PSMPSMove_RawTrackerData_get
    if _newclass:
        RawTrackerData = _swig_property(_PSMoveClient.PSMPSMove_RawTrackerData_get)
    __swig_getmethods__["TriangleButton"] = _PSMoveClient.PSMPSMove_TriangleButton_get
    if _newclass:
        TriangleButton = _swig_property(_PSMoveClient.PSMPSMove_TriangleButton_get)
    __swig_getmethods__["CircleButton"] = _PSMoveClient.PSMPSMove_CircleButton_get
    if _newclass:
        CircleButton = _swig_property(_PSMoveClient.PSMPSMove_CircleButton_get)
    __swig_getmethods__["CrossButton"] = _PSMoveClient.PSMPSMove_CrossButton_get
    if _newclass:
        CrossButton = _swig_property(_PSMoveClient.PSMPSMove_CrossButton_get)
    __swig_getmethods__["SquareButton"] = _PSMoveClient.PSMPSMove_SquareButton_get
    if _newclass:
        SquareButton = _swig_property(_PSMoveClient.PSMPSMove_SquareButton_get)
    __swig_getmethods__["SelectButton"] = _PSMoveClient.PSMPSMove_SelectButton_get
    if _newclass:
        SelectButton = _swig_property(_PSMoveClient.PSMPSMove_SelectButton_get)
    __swig_getmethods__["StartButton"] = _PSMoveClient.PSMPSMove_StartButton_get
    if _newclass:
        StartButton = _swig_property(_PSMoveClient.PSMPSMove_StartButton_get)
    __swig_getmethods__["PSButton"] = _PSMoveClient.PSMPSMove_PSButton_get
    if _newclass:
        PSButton = _swig_property(_PSMoveClient.PSMPSMove_PSButton_get)
    __swig_getmethods__["MoveButton"] = _PSMoveClient.PSMPSMove_MoveButton_get
    if _newclass:
        MoveButton = _swig_property(_PSMoveClient.PSMPSMove_MoveButton_get)
    __swig_getmethods__["TriggerButton"] = _PSMoveClient.PSMPSMove_TriggerButton_get
    if _newclass:
        TriggerButton = _swig_property(_PSMoveClient.PSMPSMove_TriggerButton_get)
    __swig_getmethods__["BatteryValue"] = _PSMoveClient.PSMPSMove_BatteryValue_get
    if _newclass:
        BatteryValue = _swig_property(_PSMoveClient.PSMPSMove_BatteryValue_get)
    __swig_getmethods__["TriggerValue"] = _PSMoveClient.PSMPSMove_TriggerValue_get
    if _newclass:
        TriggerValue = _swig_property(_PSMoveClient.PSMPSMove_TriggerValue_get)
    __swig_getmethods__["Rumble"] = _PSMoveClient.PSMPSMove_Rumble_get
    if _newclass:
        Rumble = _swig_property(_PSMoveClient.PSMPSMove_Rumble_get)
    __swig_getmethods__["LED_r"] = _PSMoveClient.PSMPSMove_LED_r_get
    if _newclass:
        LED_r = _swig_property(_PSMoveClient.PSMPSMove_LED_r_get)
    __swig_getmethods__["LED_g"] = _PSMoveClient.PSMPSMove_LED_g_get
    if _newclass:
        LED_g = _swig_property(_PSMoveClient.PSMPSMove_LED_g_get)
    __swig_getmethods__["LED_b"] = _PSMoveClient.PSMPSMove_LED_b_get
    if _newclass:
        LED_b = _swig_property(_PSMoveClient.PSMPSMove_LED_b_get)
    __swig_getmethods__["ResetPoseButtonPressTime"] = _PSMoveClient.PSMPSMove_ResetPoseButtonPressTime_get
    if _newclass:
        ResetPoseButtonPressTime = _swig_property(_PSMoveClient.PSMPSMove_ResetPoseButtonPressTime_get)
    __swig_getmethods__["bResetPoseRequestSent"] = _PSMoveClient.PSMPSMove_bResetPoseRequestSent_get
    if _newclass:
        bResetPoseRequestSent = _swig_property(_PSMoveClient.PSMPSMove_bResetPoseRequestSent_get)
    __swig_getmethods__["bPoseResetButtonEnabled"] = _PSMoveClient.PSMPSMove_bPoseResetButtonEnabled_get
    if _newclass:
        bPoseResetButtonEnabled = _swig_property(_PSMoveClient.PSMPSMove_bPoseResetButtonEnabled_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMPSMove()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMPSMove
    __del__ = lambda self: None
PSMPSMove_swigregister = _PSMoveClient.PSMPSMove_swigregister
PSMPSMove_swigregister(PSMPSMove)

class PSMPSNavi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMPSNavi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMPSNavi, name)
    __repr__ = _swig_repr
    __swig_getmethods__["L1Button"] = _PSMoveClient.PSMPSNavi_L1Button_get
    if _newclass:
        L1Button = _swig_property(_PSMoveClient.PSMPSNavi_L1Button_get)
    __swig_getmethods__["L2Button"] = _PSMoveClient.PSMPSNavi_L2Button_get
    if _newclass:
        L2Button = _swig_property(_PSMoveClient.PSMPSNavi_L2Button_get)
    __swig_getmethods__["L3Button"] = _PSMoveClient.PSMPSNavi_L3Button_get
    if _newclass:
        L3Button = _swig_property(_PSMoveClient.PSMPSNavi_L3Button_get)
    __swig_getmethods__["CircleButton"] = _PSMoveClient.PSMPSNavi_CircleButton_get
    if _newclass:
        CircleButton = _swig_property(_PSMoveClient.PSMPSNavi_CircleButton_get)
    __swig_getmethods__["CrossButton"] = _PSMoveClient.PSMPSNavi_CrossButton_get
    if _newclass:
        CrossButton = _swig_property(_PSMoveClient.PSMPSNavi_CrossButton_get)
    __swig_getmethods__["PSButton"] = _PSMoveClient.PSMPSNavi_PSButton_get
    if _newclass:
        PSButton = _swig_property(_PSMoveClient.PSMPSNavi_PSButton_get)
    __swig_getmethods__["TriggerButton"] = _PSMoveClient.PSMPSNavi_TriggerButton_get
    if _newclass:
        TriggerButton = _swig_property(_PSMoveClient.PSMPSNavi_TriggerButton_get)
    __swig_getmethods__["DPadUpButton"] = _PSMoveClient.PSMPSNavi_DPadUpButton_get
    if _newclass:
        DPadUpButton = _swig_property(_PSMoveClient.PSMPSNavi_DPadUpButton_get)
    __swig_getmethods__["DPadRightButton"] = _PSMoveClient.PSMPSNavi_DPadRightButton_get
    if _newclass:
        DPadRightButton = _swig_property(_PSMoveClient.PSMPSNavi_DPadRightButton_get)
    __swig_getmethods__["DPadDownButton"] = _PSMoveClient.PSMPSNavi_DPadDownButton_get
    if _newclass:
        DPadDownButton = _swig_property(_PSMoveClient.PSMPSNavi_DPadDownButton_get)
    __swig_getmethods__["DPadLeftButton"] = _PSMoveClient.PSMPSNavi_DPadLeftButton_get
    if _newclass:
        DPadLeftButton = _swig_property(_PSMoveClient.PSMPSNavi_DPadLeftButton_get)
    __swig_getmethods__["TriggerValue"] = _PSMoveClient.PSMPSNavi_TriggerValue_get
    if _newclass:
        TriggerValue = _swig_property(_PSMoveClient.PSMPSNavi_TriggerValue_get)
    __swig_getmethods__["Stick_XAxis"] = _PSMoveClient.PSMPSNavi_Stick_XAxis_get
    if _newclass:
        Stick_XAxis = _swig_property(_PSMoveClient.PSMPSNavi_Stick_XAxis_get)
    __swig_getmethods__["Stick_YAxis"] = _PSMoveClient.PSMPSNavi_Stick_YAxis_get
    if _newclass:
        Stick_YAxis = _swig_property(_PSMoveClient.PSMPSNavi_Stick_YAxis_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMPSNavi()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMPSNavi
    __del__ = lambda self: None
PSMPSNavi_swigregister = _PSMoveClient.PSMPSNavi_swigregister
PSMPSNavi_swigregister(PSMPSNavi)

class PSMDS4RawSensorData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMDS4RawSensorData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMDS4RawSensorData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Accelerometer"] = _PSMoveClient.PSMDS4RawSensorData_Accelerometer_get
    if _newclass:
        Accelerometer = _swig_property(_PSMoveClient.PSMDS4RawSensorData_Accelerometer_get)
    __swig_getmethods__["Gyroscope"] = _PSMoveClient.PSMDS4RawSensorData_Gyroscope_get
    if _newclass:
        Gyroscope = _swig_property(_PSMoveClient.PSMDS4RawSensorData_Gyroscope_get)
    __swig_getmethods__["TimeInSeconds"] = _PSMoveClient.PSMDS4RawSensorData_TimeInSeconds_get
    if _newclass:
        TimeInSeconds = _swig_property(_PSMoveClient.PSMDS4RawSensorData_TimeInSeconds_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMDS4RawSensorData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMDS4RawSensorData
    __del__ = lambda self: None
PSMDS4RawSensorData_swigregister = _PSMoveClient.PSMDS4RawSensorData_swigregister
PSMDS4RawSensorData_swigregister(PSMDS4RawSensorData)

class PSMDS4CalibratedSensorData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMDS4CalibratedSensorData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMDS4CalibratedSensorData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Accelerometer"] = _PSMoveClient.PSMDS4CalibratedSensorData_Accelerometer_get
    if _newclass:
        Accelerometer = _swig_property(_PSMoveClient.PSMDS4CalibratedSensorData_Accelerometer_get)
    __swig_getmethods__["Gyroscope"] = _PSMoveClient.PSMDS4CalibratedSensorData_Gyroscope_get
    if _newclass:
        Gyroscope = _swig_property(_PSMoveClient.PSMDS4CalibratedSensorData_Gyroscope_get)
    __swig_getmethods__["TimeInSeconds"] = _PSMoveClient.PSMDS4CalibratedSensorData_TimeInSeconds_get
    if _newclass:
        TimeInSeconds = _swig_property(_PSMoveClient.PSMDS4CalibratedSensorData_TimeInSeconds_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMDS4CalibratedSensorData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMDS4CalibratedSensorData
    __del__ = lambda self: None
PSMDS4CalibratedSensorData_swigregister = _PSMoveClient.PSMDS4CalibratedSensorData_swigregister
PSMDS4CalibratedSensorData_swigregister(PSMDS4CalibratedSensorData)

class PSMDualShock4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMDualShock4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMDualShock4, name)
    __repr__ = _swig_repr
    __swig_getmethods__["bHasValidHardwareCalibration"] = _PSMoveClient.PSMDualShock4_bHasValidHardwareCalibration_get
    if _newclass:
        bHasValidHardwareCalibration = _swig_property(_PSMoveClient.PSMDualShock4_bHasValidHardwareCalibration_get)
    __swig_getmethods__["bIsTrackingEnabled"] = _PSMoveClient.PSMDualShock4_bIsTrackingEnabled_get
    if _newclass:
        bIsTrackingEnabled = _swig_property(_PSMoveClient.PSMDualShock4_bIsTrackingEnabled_get)
    __swig_getmethods__["bIsCurrentlyTracking"] = _PSMoveClient.PSMDualShock4_bIsCurrentlyTracking_get
    if _newclass:
        bIsCurrentlyTracking = _swig_property(_PSMoveClient.PSMDualShock4_bIsCurrentlyTracking_get)
    __swig_getmethods__["bIsOrientationValid"] = _PSMoveClient.PSMDualShock4_bIsOrientationValid_get
    if _newclass:
        bIsOrientationValid = _swig_property(_PSMoveClient.PSMDualShock4_bIsOrientationValid_get)
    __swig_getmethods__["bIsPositionValid"] = _PSMoveClient.PSMDualShock4_bIsPositionValid_get
    if _newclass:
        bIsPositionValid = _swig_property(_PSMoveClient.PSMDualShock4_bIsPositionValid_get)
    __swig_getmethods__["bHasUnpublishedState"] = _PSMoveClient.PSMDualShock4_bHasUnpublishedState_get
    if _newclass:
        bHasUnpublishedState = _swig_property(_PSMoveClient.PSMDualShock4_bHasUnpublishedState_get)
    __swig_getmethods__["DevicePath"] = _PSMoveClient.PSMDualShock4_DevicePath_get
    if _newclass:
        DevicePath = _swig_property(_PSMoveClient.PSMDualShock4_DevicePath_get)
    __swig_getmethods__["DeviceSerial"] = _PSMoveClient.PSMDualShock4_DeviceSerial_get
    if _newclass:
        DeviceSerial = _swig_property(_PSMoveClient.PSMDualShock4_DeviceSerial_get)
    __swig_getmethods__["AssignedHostSerial"] = _PSMoveClient.PSMDualShock4_AssignedHostSerial_get
    if _newclass:
        AssignedHostSerial = _swig_property(_PSMoveClient.PSMDualShock4_AssignedHostSerial_get)
    __swig_getmethods__["PairedToHost"] = _PSMoveClient.PSMDualShock4_PairedToHost_get
    if _newclass:
        PairedToHost = _swig_property(_PSMoveClient.PSMDualShock4_PairedToHost_get)
    __swig_getmethods__["ConnectionType"] = _PSMoveClient.PSMDualShock4_ConnectionType_get
    if _newclass:
        ConnectionType = _swig_property(_PSMoveClient.PSMDualShock4_ConnectionType_get)
    __swig_getmethods__["TrackingColorType"] = _PSMoveClient.PSMDualShock4_TrackingColorType_get
    if _newclass:
        TrackingColorType = _swig_property(_PSMoveClient.PSMDualShock4_TrackingColorType_get)
    __swig_getmethods__["Pose"] = _PSMoveClient.PSMDualShock4_Pose_get
    if _newclass:
        Pose = _swig_property(_PSMoveClient.PSMDualShock4_Pose_get)
    __swig_getmethods__["PhysicsData"] = _PSMoveClient.PSMDualShock4_PhysicsData_get
    if _newclass:
        PhysicsData = _swig_property(_PSMoveClient.PSMDualShock4_PhysicsData_get)
    __swig_getmethods__["RawSensorData"] = _PSMoveClient.PSMDualShock4_RawSensorData_get
    if _newclass:
        RawSensorData = _swig_property(_PSMoveClient.PSMDualShock4_RawSensorData_get)
    __swig_getmethods__["CalibratedSensorData"] = _PSMoveClient.PSMDualShock4_CalibratedSensorData_get
    if _newclass:
        CalibratedSensorData = _swig_property(_PSMoveClient.PSMDualShock4_CalibratedSensorData_get)
    __swig_getmethods__["RawTrackerData"] = _PSMoveClient.PSMDualShock4_RawTrackerData_get
    if _newclass:
        RawTrackerData = _swig_property(_PSMoveClient.PSMDualShock4_RawTrackerData_get)
    __swig_getmethods__["DPadUpButton"] = _PSMoveClient.PSMDualShock4_DPadUpButton_get
    if _newclass:
        DPadUpButton = _swig_property(_PSMoveClient.PSMDualShock4_DPadUpButton_get)
    __swig_getmethods__["DPadDownButton"] = _PSMoveClient.PSMDualShock4_DPadDownButton_get
    if _newclass:
        DPadDownButton = _swig_property(_PSMoveClient.PSMDualShock4_DPadDownButton_get)
    __swig_getmethods__["DPadLeftButton"] = _PSMoveClient.PSMDualShock4_DPadLeftButton_get
    if _newclass:
        DPadLeftButton = _swig_property(_PSMoveClient.PSMDualShock4_DPadLeftButton_get)
    __swig_getmethods__["DPadRightButton"] = _PSMoveClient.PSMDualShock4_DPadRightButton_get
    if _newclass:
        DPadRightButton = _swig_property(_PSMoveClient.PSMDualShock4_DPadRightButton_get)
    __swig_getmethods__["SquareButton"] = _PSMoveClient.PSMDualShock4_SquareButton_get
    if _newclass:
        SquareButton = _swig_property(_PSMoveClient.PSMDualShock4_SquareButton_get)
    __swig_getmethods__["CrossButton"] = _PSMoveClient.PSMDualShock4_CrossButton_get
    if _newclass:
        CrossButton = _swig_property(_PSMoveClient.PSMDualShock4_CrossButton_get)
    __swig_getmethods__["CircleButton"] = _PSMoveClient.PSMDualShock4_CircleButton_get
    if _newclass:
        CircleButton = _swig_property(_PSMoveClient.PSMDualShock4_CircleButton_get)
    __swig_getmethods__["TriangleButton"] = _PSMoveClient.PSMDualShock4_TriangleButton_get
    if _newclass:
        TriangleButton = _swig_property(_PSMoveClient.PSMDualShock4_TriangleButton_get)
    __swig_getmethods__["L1Button"] = _PSMoveClient.PSMDualShock4_L1Button_get
    if _newclass:
        L1Button = _swig_property(_PSMoveClient.PSMDualShock4_L1Button_get)
    __swig_getmethods__["R1Button"] = _PSMoveClient.PSMDualShock4_R1Button_get
    if _newclass:
        R1Button = _swig_property(_PSMoveClient.PSMDualShock4_R1Button_get)
    __swig_getmethods__["L2Button"] = _PSMoveClient.PSMDualShock4_L2Button_get
    if _newclass:
        L2Button = _swig_property(_PSMoveClient.PSMDualShock4_L2Button_get)
    __swig_getmethods__["R2Button"] = _PSMoveClient.PSMDualShock4_R2Button_get
    if _newclass:
        R2Button = _swig_property(_PSMoveClient.PSMDualShock4_R2Button_get)
    __swig_getmethods__["L3Button"] = _PSMoveClient.PSMDualShock4_L3Button_get
    if _newclass:
        L3Button = _swig_property(_PSMoveClient.PSMDualShock4_L3Button_get)
    __swig_getmethods__["R3Button"] = _PSMoveClient.PSMDualShock4_R3Button_get
    if _newclass:
        R3Button = _swig_property(_PSMoveClient.PSMDualShock4_R3Button_get)
    __swig_getmethods__["ShareButton"] = _PSMoveClient.PSMDualShock4_ShareButton_get
    if _newclass:
        ShareButton = _swig_property(_PSMoveClient.PSMDualShock4_ShareButton_get)
    __swig_getmethods__["OptionsButton"] = _PSMoveClient.PSMDualShock4_OptionsButton_get
    if _newclass:
        OptionsButton = _swig_property(_PSMoveClient.PSMDualShock4_OptionsButton_get)
    __swig_getmethods__["PSButton"] = _PSMoveClient.PSMDualShock4_PSButton_get
    if _newclass:
        PSButton = _swig_property(_PSMoveClient.PSMDualShock4_PSButton_get)
    __swig_getmethods__["TrackPadButton"] = _PSMoveClient.PSMDualShock4_TrackPadButton_get
    if _newclass:
        TrackPadButton = _swig_property(_PSMoveClient.PSMDualShock4_TrackPadButton_get)
    __swig_getmethods__["LeftAnalogX"] = _PSMoveClient.PSMDualShock4_LeftAnalogX_get
    if _newclass:
        LeftAnalogX = _swig_property(_PSMoveClient.PSMDualShock4_LeftAnalogX_get)
    __swig_getmethods__["LeftAnalogY"] = _PSMoveClient.PSMDualShock4_LeftAnalogY_get
    if _newclass:
        LeftAnalogY = _swig_property(_PSMoveClient.PSMDualShock4_LeftAnalogY_get)
    __swig_getmethods__["RightAnalogX"] = _PSMoveClient.PSMDualShock4_RightAnalogX_get
    if _newclass:
        RightAnalogX = _swig_property(_PSMoveClient.PSMDualShock4_RightAnalogX_get)
    __swig_getmethods__["RightAnalogY"] = _PSMoveClient.PSMDualShock4_RightAnalogY_get
    if _newclass:
        RightAnalogY = _swig_property(_PSMoveClient.PSMDualShock4_RightAnalogY_get)
    __swig_getmethods__["LeftTriggerValue"] = _PSMoveClient.PSMDualShock4_LeftTriggerValue_get
    if _newclass:
        LeftTriggerValue = _swig_property(_PSMoveClient.PSMDualShock4_LeftTriggerValue_get)
    __swig_getmethods__["RightTriggerValue"] = _PSMoveClient.PSMDualShock4_RightTriggerValue_get
    if _newclass:
        RightTriggerValue = _swig_property(_PSMoveClient.PSMDualShock4_RightTriggerValue_get)
    __swig_getmethods__["BigRumble"] = _PSMoveClient.PSMDualShock4_BigRumble_get
    if _newclass:
        BigRumble = _swig_property(_PSMoveClient.PSMDualShock4_BigRumble_get)
    __swig_getmethods__["SmallRumble"] = _PSMoveClient.PSMDualShock4_SmallRumble_get
    if _newclass:
        SmallRumble = _swig_property(_PSMoveClient.PSMDualShock4_SmallRumble_get)
    __swig_getmethods__["LED_r"] = _PSMoveClient.PSMDualShock4_LED_r_get
    if _newclass:
        LED_r = _swig_property(_PSMoveClient.PSMDualShock4_LED_r_get)
    __swig_getmethods__["LED_g"] = _PSMoveClient.PSMDualShock4_LED_g_get
    if _newclass:
        LED_g = _swig_property(_PSMoveClient.PSMDualShock4_LED_g_get)
    __swig_getmethods__["LED_b"] = _PSMoveClient.PSMDualShock4_LED_b_get
    if _newclass:
        LED_b = _swig_property(_PSMoveClient.PSMDualShock4_LED_b_get)
    __swig_getmethods__["ResetPoseButtonPressTime"] = _PSMoveClient.PSMDualShock4_ResetPoseButtonPressTime_get
    if _newclass:
        ResetPoseButtonPressTime = _swig_property(_PSMoveClient.PSMDualShock4_ResetPoseButtonPressTime_get)
    __swig_getmethods__["bResetPoseRequestSent"] = _PSMoveClient.PSMDualShock4_bResetPoseRequestSent_get
    if _newclass:
        bResetPoseRequestSent = _swig_property(_PSMoveClient.PSMDualShock4_bResetPoseRequestSent_get)
    __swig_getmethods__["bPoseResetButtonEnabled"] = _PSMoveClient.PSMDualShock4_bPoseResetButtonEnabled_get
    if _newclass:
        bPoseResetButtonEnabled = _swig_property(_PSMoveClient.PSMDualShock4_bPoseResetButtonEnabled_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMDualShock4()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMDualShock4
    __del__ = lambda self: None
PSMDualShock4_swigregister = _PSMoveClient.PSMDualShock4_swigregister
PSMDualShock4_swigregister(PSMDualShock4)

class PSMVirtualController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMVirtualController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMVirtualController, name)
    __repr__ = _swig_repr
    __swig_getmethods__["bIsTrackingEnabled"] = _PSMoveClient.PSMVirtualController_bIsTrackingEnabled_get
    if _newclass:
        bIsTrackingEnabled = _swig_property(_PSMoveClient.PSMVirtualController_bIsTrackingEnabled_get)
    __swig_getmethods__["bIsCurrentlyTracking"] = _PSMoveClient.PSMVirtualController_bIsCurrentlyTracking_get
    if _newclass:
        bIsCurrentlyTracking = _swig_property(_PSMoveClient.PSMVirtualController_bIsCurrentlyTracking_get)
    __swig_getmethods__["bIsPositionValid"] = _PSMoveClient.PSMVirtualController_bIsPositionValid_get
    if _newclass:
        bIsPositionValid = _swig_property(_PSMoveClient.PSMVirtualController_bIsPositionValid_get)
    __swig_getmethods__["DevicePath"] = _PSMoveClient.PSMVirtualController_DevicePath_get
    if _newclass:
        DevicePath = _swig_property(_PSMoveClient.PSMVirtualController_DevicePath_get)
    __swig_getmethods__["vendorID"] = _PSMoveClient.PSMVirtualController_vendorID_get
    if _newclass:
        vendorID = _swig_property(_PSMoveClient.PSMVirtualController_vendorID_get)
    __swig_getmethods__["productID"] = _PSMoveClient.PSMVirtualController_productID_get
    if _newclass:
        productID = _swig_property(_PSMoveClient.PSMVirtualController_productID_get)
    __swig_getmethods__["numAxes"] = _PSMoveClient.PSMVirtualController_numAxes_get
    if _newclass:
        numAxes = _swig_property(_PSMoveClient.PSMVirtualController_numAxes_get)
    __swig_getmethods__["numButtons"] = _PSMoveClient.PSMVirtualController_numButtons_get
    if _newclass:
        numButtons = _swig_property(_PSMoveClient.PSMVirtualController_numButtons_get)
    __swig_getmethods__["axisStates"] = _PSMoveClient.PSMVirtualController_axisStates_get
    if _newclass:
        axisStates = _swig_property(_PSMoveClient.PSMVirtualController_axisStates_get)
    __swig_getmethods__["buttonStates"] = _PSMoveClient.PSMVirtualController_buttonStates_get
    if _newclass:
        buttonStates = _swig_property(_PSMoveClient.PSMVirtualController_buttonStates_get)
    __swig_getmethods__["TrackingColorType"] = _PSMoveClient.PSMVirtualController_TrackingColorType_get
    if _newclass:
        TrackingColorType = _swig_property(_PSMoveClient.PSMVirtualController_TrackingColorType_get)
    __swig_getmethods__["Pose"] = _PSMoveClient.PSMVirtualController_Pose_get
    if _newclass:
        Pose = _swig_property(_PSMoveClient.PSMVirtualController_Pose_get)
    __swig_getmethods__["PhysicsData"] = _PSMoveClient.PSMVirtualController_PhysicsData_get
    if _newclass:
        PhysicsData = _swig_property(_PSMoveClient.PSMVirtualController_PhysicsData_get)
    __swig_getmethods__["RawTrackerData"] = _PSMoveClient.PSMVirtualController_RawTrackerData_get
    if _newclass:
        RawTrackerData = _swig_property(_PSMoveClient.PSMVirtualController_RawTrackerData_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMVirtualController()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMVirtualController
    __del__ = lambda self: None
PSMVirtualController_swigregister = _PSMoveClient.PSMVirtualController_swigregister
PSMVirtualController_swigregister(PSMVirtualController)

class PSMController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMController, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ControllerID"] = _PSMoveClient.PSMController_ControllerID_get
    if _newclass:
        ControllerID = _swig_property(_PSMoveClient.PSMController_ControllerID_get)
    __swig_getmethods__["ControllerType"] = _PSMoveClient.PSMController_ControllerType_get
    if _newclass:
        ControllerType = _swig_property(_PSMoveClient.PSMController_ControllerType_get)
    __swig_getmethods__["ControllerHand"] = _PSMoveClient.PSMController_ControllerHand_get
    if _newclass:
        ControllerHand = _swig_property(_PSMoveClient.PSMController_ControllerHand_get)
    __swig_getmethods__["ControllerState"] = _PSMoveClient.PSMController_ControllerState_get
    if _newclass:
        ControllerState = _swig_property(_PSMoveClient.PSMController_ControllerState_get)
    __swig_getmethods__["bValid"] = _PSMoveClient.PSMController_bValid_get
    if _newclass:
        bValid = _swig_property(_PSMoveClient.PSMController_bValid_get)
    __swig_getmethods__["OutputSequenceNum"] = _PSMoveClient.PSMController_OutputSequenceNum_get
    if _newclass:
        OutputSequenceNum = _swig_property(_PSMoveClient.PSMController_OutputSequenceNum_get)
    __swig_getmethods__["InputSequenceNum"] = _PSMoveClient.PSMController_InputSequenceNum_get
    if _newclass:
        InputSequenceNum = _swig_property(_PSMoveClient.PSMController_InputSequenceNum_get)
    __swig_getmethods__["IsConnected"] = _PSMoveClient.PSMController_IsConnected_get
    if _newclass:
        IsConnected = _swig_property(_PSMoveClient.PSMController_IsConnected_get)
    __swig_getmethods__["DataFrameLastReceivedTime"] = _PSMoveClient.PSMController_DataFrameLastReceivedTime_get
    if _newclass:
        DataFrameLastReceivedTime = _swig_property(_PSMoveClient.PSMController_DataFrameLastReceivedTime_get)
    __swig_getmethods__["DataFrameAverageFPS"] = _PSMoveClient.PSMController_DataFrameAverageFPS_get
    if _newclass:
        DataFrameAverageFPS = _swig_property(_PSMoveClient.PSMController_DataFrameAverageFPS_get)
    __swig_getmethods__["ListenerCount"] = _PSMoveClient.PSMController_ListenerCount_get
    if _newclass:
        ListenerCount = _swig_property(_PSMoveClient.PSMController_ListenerCount_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMController()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMController
    __del__ = lambda self: None
PSMController_swigregister = _PSMoveClient.PSMController_swigregister
PSMController_swigregister(PSMController)

class PSMController_ControllerState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMController_ControllerState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMController_ControllerState, name)
    __repr__ = _swig_repr
    __swig_getmethods__["PSMoveState"] = _PSMoveClient.PSMController_ControllerState_PSMoveState_get
    if _newclass:
        PSMoveState = _swig_property(_PSMoveClient.PSMController_ControllerState_PSMoveState_get)
    __swig_getmethods__["PSNaviState"] = _PSMoveClient.PSMController_ControllerState_PSNaviState_get
    if _newclass:
        PSNaviState = _swig_property(_PSMoveClient.PSMController_ControllerState_PSNaviState_get)
    __swig_getmethods__["PSDS4State"] = _PSMoveClient.PSMController_ControllerState_PSDS4State_get
    if _newclass:
        PSDS4State = _swig_property(_PSMoveClient.PSMController_ControllerState_PSDS4State_get)
    __swig_getmethods__["VirtualController"] = _PSMoveClient.PSMController_ControllerState_VirtualController_get
    if _newclass:
        VirtualController = _swig_property(_PSMoveClient.PSMController_ControllerState_VirtualController_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMController_ControllerState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMController_ControllerState
    __del__ = lambda self: None
PSMController_ControllerState_swigregister = _PSMoveClient.PSMController_ControllerState_swigregister
PSMController_ControllerState_swigregister(PSMController_ControllerState)

class PSMVideoFrameBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMVideoFrameBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMVideoFrameBuffer, name)
    __repr__ = _swig_repr
    __swig_getmethods__["rgb_buffer"] = _PSMoveClient.PSMVideoFrameBuffer_rgb_buffer_get
    if _newclass:
        rgb_buffer = _swig_property(_PSMoveClient.PSMVideoFrameBuffer_rgb_buffer_get)
    __swig_getmethods__["buffer_size_bytes"] = _PSMoveClient.PSMVideoFrameBuffer_buffer_size_bytes_get
    if _newclass:
        buffer_size_bytes = _swig_property(_PSMoveClient.PSMVideoFrameBuffer_buffer_size_bytes_get)
    __swig_getmethods__["width"] = _PSMoveClient.PSMVideoFrameBuffer_width_get
    if _newclass:
        width = _swig_property(_PSMoveClient.PSMVideoFrameBuffer_width_get)
    __swig_getmethods__["height"] = _PSMoveClient.PSMVideoFrameBuffer_height_get
    if _newclass:
        height = _swig_property(_PSMoveClient.PSMVideoFrameBuffer_height_get)
    __swig_getmethods__["stride"] = _PSMoveClient.PSMVideoFrameBuffer_stride_get
    if _newclass:
        stride = _swig_property(_PSMoveClient.PSMVideoFrameBuffer_stride_get)
    __swig_getmethods__["frame_index"] = _PSMoveClient.PSMVideoFrameBuffer_frame_index_get
    if _newclass:
        frame_index = _swig_property(_PSMoveClient.PSMVideoFrameBuffer_frame_index_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMVideoFrameBuffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMVideoFrameBuffer
    __del__ = lambda self: None
PSMVideoFrameBuffer_swigregister = _PSMoveClient.PSMVideoFrameBuffer_swigregister
PSMVideoFrameBuffer_swigregister(PSMVideoFrameBuffer)

class PSMClientTrackerInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMClientTrackerInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMClientTrackerInfo, name)
    __repr__ = _swig_repr
    __swig_getmethods__["tracker_id"] = _PSMoveClient.PSMClientTrackerInfo_tracker_id_get
    if _newclass:
        tracker_id = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_id_get)
    __swig_getmethods__["tracker_type"] = _PSMoveClient.PSMClientTrackerInfo_tracker_type_get
    if _newclass:
        tracker_type = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_type_get)
    __swig_getmethods__["tracker_driver"] = _PSMoveClient.PSMClientTrackerInfo_tracker_driver_get
    if _newclass:
        tracker_driver = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_driver_get)
    __swig_getmethods__["device_path"] = _PSMoveClient.PSMClientTrackerInfo_device_path_get
    if _newclass:
        device_path = _swig_property(_PSMoveClient.PSMClientTrackerInfo_device_path_get)
    __swig_getmethods__["shared_memory_name"] = _PSMoveClient.PSMClientTrackerInfo_shared_memory_name_get
    if _newclass:
        shared_memory_name = _swig_property(_PSMoveClient.PSMClientTrackerInfo_shared_memory_name_get)
    __swig_getmethods__["tracker_focal_lengths"] = _PSMoveClient.PSMClientTrackerInfo_tracker_focal_lengths_get
    if _newclass:
        tracker_focal_lengths = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_focal_lengths_get)
    __swig_getmethods__["tracker_principal_point"] = _PSMoveClient.PSMClientTrackerInfo_tracker_principal_point_get
    if _newclass:
        tracker_principal_point = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_principal_point_get)
    __swig_getmethods__["tracker_screen_dimensions"] = _PSMoveClient.PSMClientTrackerInfo_tracker_screen_dimensions_get
    if _newclass:
        tracker_screen_dimensions = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_screen_dimensions_get)
    __swig_getmethods__["tracker_hfov"] = _PSMoveClient.PSMClientTrackerInfo_tracker_hfov_get
    if _newclass:
        tracker_hfov = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_hfov_get)
    __swig_getmethods__["tracker_vfov"] = _PSMoveClient.PSMClientTrackerInfo_tracker_vfov_get
    if _newclass:
        tracker_vfov = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_vfov_get)
    __swig_getmethods__["tracker_znear"] = _PSMoveClient.PSMClientTrackerInfo_tracker_znear_get
    if _newclass:
        tracker_znear = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_znear_get)
    __swig_getmethods__["tracker_zfar"] = _PSMoveClient.PSMClientTrackerInfo_tracker_zfar_get
    if _newclass:
        tracker_zfar = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_zfar_get)
    __swig_getmethods__["tracker_k1"] = _PSMoveClient.PSMClientTrackerInfo_tracker_k1_get
    if _newclass:
        tracker_k1 = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_k1_get)
    __swig_getmethods__["tracker_k2"] = _PSMoveClient.PSMClientTrackerInfo_tracker_k2_get
    if _newclass:
        tracker_k2 = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_k2_get)
    __swig_getmethods__["tracker_k3"] = _PSMoveClient.PSMClientTrackerInfo_tracker_k3_get
    if _newclass:
        tracker_k3 = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_k3_get)
    __swig_getmethods__["tracker_p1"] = _PSMoveClient.PSMClientTrackerInfo_tracker_p1_get
    if _newclass:
        tracker_p1 = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_p1_get)
    __swig_getmethods__["tracker_p2"] = _PSMoveClient.PSMClientTrackerInfo_tracker_p2_get
    if _newclass:
        tracker_p2 = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_p2_get)
    __swig_getmethods__["tracker_pose"] = _PSMoveClient.PSMClientTrackerInfo_tracker_pose_get
    if _newclass:
        tracker_pose = _swig_property(_PSMoveClient.PSMClientTrackerInfo_tracker_pose_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMClientTrackerInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMClientTrackerInfo
    __del__ = lambda self: None
PSMClientTrackerInfo_swigregister = _PSMoveClient.PSMClientTrackerInfo_swigregister
PSMClientTrackerInfo_swigregister(PSMClientTrackerInfo)

class PSMTracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMTracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMTracker, name)
    __repr__ = _swig_repr
    __swig_getmethods__["tracker_info"] = _PSMoveClient.PSMTracker_tracker_info_get
    if _newclass:
        tracker_info = _swig_property(_PSMoveClient.PSMTracker_tracker_info_get)
    __swig_getmethods__["listener_count"] = _PSMoveClient.PSMTracker_listener_count_get
    if _newclass:
        listener_count = _swig_property(_PSMoveClient.PSMTracker_listener_count_get)
    __swig_getmethods__["is_connected"] = _PSMoveClient.PSMTracker_is_connected_get
    if _newclass:
        is_connected = _swig_property(_PSMoveClient.PSMTracker_is_connected_get)
    __swig_getmethods__["sequence_num"] = _PSMoveClient.PSMTracker_sequence_num_get
    if _newclass:
        sequence_num = _swig_property(_PSMoveClient.PSMTracker_sequence_num_get)
    __swig_getmethods__["data_frame_last_received_time"] = _PSMoveClient.PSMTracker_data_frame_last_received_time_get
    if _newclass:
        data_frame_last_received_time = _swig_property(_PSMoveClient.PSMTracker_data_frame_last_received_time_get)
    __swig_getmethods__["data_frame_average_fps"] = _PSMoveClient.PSMTracker_data_frame_average_fps_get
    if _newclass:
        data_frame_average_fps = _swig_property(_PSMoveClient.PSMTracker_data_frame_average_fps_get)
    __swig_getmethods__["opaque_shared_memory_accesor"] = _PSMoveClient.PSMTracker_opaque_shared_memory_accesor_get
    if _newclass:
        opaque_shared_memory_accesor = _swig_property(_PSMoveClient.PSMTracker_opaque_shared_memory_accesor_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMTracker()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMTracker
    __del__ = lambda self: None
PSMTracker_swigregister = _PSMoveClient.PSMTracker_swigregister
PSMTracker_swigregister(PSMTracker)

class PSMClientHMDInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMClientHMDInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMClientHMDInfo, name)
    __repr__ = _swig_repr
    __swig_getmethods__["hmd_id"] = _PSMoveClient.PSMClientHMDInfo_hmd_id_get
    if _newclass:
        hmd_id = _swig_property(_PSMoveClient.PSMClientHMDInfo_hmd_id_get)
    __swig_getmethods__["hmd_type"] = _PSMoveClient.PSMClientHMDInfo_hmd_type_get
    if _newclass:
        hmd_type = _swig_property(_PSMoveClient.PSMClientHMDInfo_hmd_type_get)
    __swig_getmethods__["tracking_color_type"] = _PSMoveClient.PSMClientHMDInfo_tracking_color_type_get
    if _newclass:
        tracking_color_type = _swig_property(_PSMoveClient.PSMClientHMDInfo_tracking_color_type_get)
    __swig_getmethods__["device_path"] = _PSMoveClient.PSMClientHMDInfo_device_path_get
    if _newclass:
        device_path = _swig_property(_PSMoveClient.PSMClientHMDInfo_device_path_get)
    __swig_getmethods__["orientation_filter"] = _PSMoveClient.PSMClientHMDInfo_orientation_filter_get
    if _newclass:
        orientation_filter = _swig_property(_PSMoveClient.PSMClientHMDInfo_orientation_filter_get)
    __swig_getmethods__["position_filter"] = _PSMoveClient.PSMClientHMDInfo_position_filter_get
    if _newclass:
        position_filter = _swig_property(_PSMoveClient.PSMClientHMDInfo_position_filter_get)
    __swig_getmethods__["prediction_time"] = _PSMoveClient.PSMClientHMDInfo_prediction_time_get
    if _newclass:
        prediction_time = _swig_property(_PSMoveClient.PSMClientHMDInfo_prediction_time_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMClientHMDInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMClientHMDInfo
    __del__ = lambda self: None
PSMClientHMDInfo_swigregister = _PSMoveClient.PSMClientHMDInfo_swigregister
PSMClientHMDInfo_swigregister(PSMClientHMDInfo)

class PSMMorpheusRawSensorData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMMorpheusRawSensorData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMMorpheusRawSensorData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Accelerometer"] = _PSMoveClient.PSMMorpheusRawSensorData_Accelerometer_get
    if _newclass:
        Accelerometer = _swig_property(_PSMoveClient.PSMMorpheusRawSensorData_Accelerometer_get)
    __swig_getmethods__["Gyroscope"] = _PSMoveClient.PSMMorpheusRawSensorData_Gyroscope_get
    if _newclass:
        Gyroscope = _swig_property(_PSMoveClient.PSMMorpheusRawSensorData_Gyroscope_get)
    __swig_getmethods__["TimeInSeconds"] = _PSMoveClient.PSMMorpheusRawSensorData_TimeInSeconds_get
    if _newclass:
        TimeInSeconds = _swig_property(_PSMoveClient.PSMMorpheusRawSensorData_TimeInSeconds_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMMorpheusRawSensorData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMMorpheusRawSensorData
    __del__ = lambda self: None
PSMMorpheusRawSensorData_swigregister = _PSMoveClient.PSMMorpheusRawSensorData_swigregister
PSMMorpheusRawSensorData_swigregister(PSMMorpheusRawSensorData)

class PSMMorpheusCalibratedSensorData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMMorpheusCalibratedSensorData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMMorpheusCalibratedSensorData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Accelerometer"] = _PSMoveClient.PSMMorpheusCalibratedSensorData_Accelerometer_get
    if _newclass:
        Accelerometer = _swig_property(_PSMoveClient.PSMMorpheusCalibratedSensorData_Accelerometer_get)
    __swig_getmethods__["Gyroscope"] = _PSMoveClient.PSMMorpheusCalibratedSensorData_Gyroscope_get
    if _newclass:
        Gyroscope = _swig_property(_PSMoveClient.PSMMorpheusCalibratedSensorData_Gyroscope_get)
    __swig_getmethods__["TimeInSeconds"] = _PSMoveClient.PSMMorpheusCalibratedSensorData_TimeInSeconds_get
    if _newclass:
        TimeInSeconds = _swig_property(_PSMoveClient.PSMMorpheusCalibratedSensorData_TimeInSeconds_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMMorpheusCalibratedSensorData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMMorpheusCalibratedSensorData
    __del__ = lambda self: None
PSMMorpheusCalibratedSensorData_swigregister = _PSMoveClient.PSMMorpheusCalibratedSensorData_swigregister
PSMMorpheusCalibratedSensorData_swigregister(PSMMorpheusCalibratedSensorData)

class PSMMorpheus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMMorpheus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMMorpheus, name)
    __repr__ = _swig_repr
    __swig_getmethods__["bIsTrackingEnabled"] = _PSMoveClient.PSMMorpheus_bIsTrackingEnabled_get
    if _newclass:
        bIsTrackingEnabled = _swig_property(_PSMoveClient.PSMMorpheus_bIsTrackingEnabled_get)
    __swig_getmethods__["bIsCurrentlyTracking"] = _PSMoveClient.PSMMorpheus_bIsCurrentlyTracking_get
    if _newclass:
        bIsCurrentlyTracking = _swig_property(_PSMoveClient.PSMMorpheus_bIsCurrentlyTracking_get)
    __swig_getmethods__["bIsOrientationValid"] = _PSMoveClient.PSMMorpheus_bIsOrientationValid_get
    if _newclass:
        bIsOrientationValid = _swig_property(_PSMoveClient.PSMMorpheus_bIsOrientationValid_get)
    __swig_getmethods__["bIsPositionValid"] = _PSMoveClient.PSMMorpheus_bIsPositionValid_get
    if _newclass:
        bIsPositionValid = _swig_property(_PSMoveClient.PSMMorpheus_bIsPositionValid_get)
    __swig_getmethods__["Pose"] = _PSMoveClient.PSMMorpheus_Pose_get
    if _newclass:
        Pose = _swig_property(_PSMoveClient.PSMMorpheus_Pose_get)
    __swig_getmethods__["PhysicsData"] = _PSMoveClient.PSMMorpheus_PhysicsData_get
    if _newclass:
        PhysicsData = _swig_property(_PSMoveClient.PSMMorpheus_PhysicsData_get)
    __swig_getmethods__["RawSensorData"] = _PSMoveClient.PSMMorpheus_RawSensorData_get
    if _newclass:
        RawSensorData = _swig_property(_PSMoveClient.PSMMorpheus_RawSensorData_get)
    __swig_getmethods__["CalibratedSensorData"] = _PSMoveClient.PSMMorpheus_CalibratedSensorData_get
    if _newclass:
        CalibratedSensorData = _swig_property(_PSMoveClient.PSMMorpheus_CalibratedSensorData_get)
    __swig_getmethods__["RawTrackerData"] = _PSMoveClient.PSMMorpheus_RawTrackerData_get
    if _newclass:
        RawTrackerData = _swig_property(_PSMoveClient.PSMMorpheus_RawTrackerData_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMMorpheus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMMorpheus
    __del__ = lambda self: None
PSMMorpheus_swigregister = _PSMoveClient.PSMMorpheus_swigregister
PSMMorpheus_swigregister(PSMMorpheus)

class PSMVirtualHMD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMVirtualHMD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMVirtualHMD, name)
    __repr__ = _swig_repr
    __swig_getmethods__["bIsTrackingEnabled"] = _PSMoveClient.PSMVirtualHMD_bIsTrackingEnabled_get
    if _newclass:
        bIsTrackingEnabled = _swig_property(_PSMoveClient.PSMVirtualHMD_bIsTrackingEnabled_get)
    __swig_getmethods__["bIsCurrentlyTracking"] = _PSMoveClient.PSMVirtualHMD_bIsCurrentlyTracking_get
    if _newclass:
        bIsCurrentlyTracking = _swig_property(_PSMoveClient.PSMVirtualHMD_bIsCurrentlyTracking_get)
    __swig_getmethods__["bIsPositionValid"] = _PSMoveClient.PSMVirtualHMD_bIsPositionValid_get
    if _newclass:
        bIsPositionValid = _swig_property(_PSMoveClient.PSMVirtualHMD_bIsPositionValid_get)
    __swig_getmethods__["Pose"] = _PSMoveClient.PSMVirtualHMD_Pose_get
    if _newclass:
        Pose = _swig_property(_PSMoveClient.PSMVirtualHMD_Pose_get)
    __swig_getmethods__["PhysicsData"] = _PSMoveClient.PSMVirtualHMD_PhysicsData_get
    if _newclass:
        PhysicsData = _swig_property(_PSMoveClient.PSMVirtualHMD_PhysicsData_get)
    __swig_getmethods__["RawTrackerData"] = _PSMoveClient.PSMVirtualHMD_RawTrackerData_get
    if _newclass:
        RawTrackerData = _swig_property(_PSMoveClient.PSMVirtualHMD_RawTrackerData_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMVirtualHMD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMVirtualHMD
    __del__ = lambda self: None
PSMVirtualHMD_swigregister = _PSMoveClient.PSMVirtualHMD_swigregister
PSMVirtualHMD_swigregister(PSMVirtualHMD)

class PSMHeadMountedDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMHeadMountedDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMHeadMountedDisplay, name)
    __repr__ = _swig_repr
    __swig_getmethods__["HmdID"] = _PSMoveClient.PSMHeadMountedDisplay_HmdID_get
    if _newclass:
        HmdID = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_HmdID_get)
    __swig_getmethods__["HmdType"] = _PSMoveClient.PSMHeadMountedDisplay_HmdType_get
    if _newclass:
        HmdType = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_HmdType_get)
    __swig_getmethods__["HmdState"] = _PSMoveClient.PSMHeadMountedDisplay_HmdState_get
    if _newclass:
        HmdState = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_HmdState_get)
    __swig_getmethods__["bValid"] = _PSMoveClient.PSMHeadMountedDisplay_bValid_get
    if _newclass:
        bValid = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_bValid_get)
    __swig_getmethods__["OutputSequenceNum"] = _PSMoveClient.PSMHeadMountedDisplay_OutputSequenceNum_get
    if _newclass:
        OutputSequenceNum = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_OutputSequenceNum_get)
    __swig_getmethods__["IsConnected"] = _PSMoveClient.PSMHeadMountedDisplay_IsConnected_get
    if _newclass:
        IsConnected = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_IsConnected_get)
    __swig_getmethods__["DataFrameLastReceivedTime"] = _PSMoveClient.PSMHeadMountedDisplay_DataFrameLastReceivedTime_get
    if _newclass:
        DataFrameLastReceivedTime = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_DataFrameLastReceivedTime_get)
    __swig_getmethods__["DataFrameAverageFPS"] = _PSMoveClient.PSMHeadMountedDisplay_DataFrameAverageFPS_get
    if _newclass:
        DataFrameAverageFPS = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_DataFrameAverageFPS_get)
    __swig_getmethods__["ListenerCount"] = _PSMoveClient.PSMHeadMountedDisplay_ListenerCount_get
    if _newclass:
        ListenerCount = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_ListenerCount_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMHeadMountedDisplay()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMHeadMountedDisplay
    __del__ = lambda self: None
PSMHeadMountedDisplay_swigregister = _PSMoveClient.PSMHeadMountedDisplay_swigregister
PSMHeadMountedDisplay_swigregister(PSMHeadMountedDisplay)

class PSMHeadMountedDisplay_HmdState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMHeadMountedDisplay_HmdState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMHeadMountedDisplay_HmdState, name)
    __repr__ = _swig_repr
    __swig_getmethods__["MorpheusState"] = _PSMoveClient.PSMHeadMountedDisplay_HmdState_MorpheusState_get
    if _newclass:
        MorpheusState = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_HmdState_MorpheusState_get)
    __swig_getmethods__["VirtualHMDState"] = _PSMoveClient.PSMHeadMountedDisplay_HmdState_VirtualHMDState_get
    if _newclass:
        VirtualHMDState = _swig_property(_PSMoveClient.PSMHeadMountedDisplay_HmdState_VirtualHMDState_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMHeadMountedDisplay_HmdState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMHeadMountedDisplay_HmdState
    __del__ = lambda self: None
PSMHeadMountedDisplay_HmdState_swigregister = _PSMoveClient.PSMHeadMountedDisplay_HmdState_swigregister
PSMHeadMountedDisplay_HmdState_swigregister(PSMHeadMountedDisplay_HmdState)

PSMEvent_connectedToService = _PSMoveClient.PSMEvent_connectedToService
PSMEvent_failedToConnectToService = _PSMoveClient.PSMEvent_failedToConnectToService
PSMEvent_disconnectedFromService = _PSMoveClient.PSMEvent_disconnectedFromService
PSMEvent_opaqueServiceEvent = _PSMoveClient.PSMEvent_opaqueServiceEvent
PSMEvent_controllerListUpdated = _PSMoveClient.PSMEvent_controllerListUpdated
PSMEvent_trackerListUpdated = _PSMoveClient.PSMEvent_trackerListUpdated
PSMEvent_hmdListUpdated = _PSMoveClient.PSMEvent_hmdListUpdated
PSMEvent_systemButtonPressed = _PSMoveClient.PSMEvent_systemButtonPressed
class PSMEventMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMEventMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMEventMessage, name)
    __repr__ = _swig_repr
    __swig_getmethods__["event_type"] = _PSMoveClient.PSMEventMessage_event_type_get
    if _newclass:
        event_type = _swig_property(_PSMoveClient.PSMEventMessage_event_type_get)
    __swig_getmethods__["event_data_handle"] = _PSMoveClient.PSMEventMessage_event_data_handle_get
    if _newclass:
        event_data_handle = _swig_property(_PSMoveClient.PSMEventMessage_event_data_handle_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMEventMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMEventMessage
    __del__ = lambda self: None
PSMEventMessage_swigregister = _PSMoveClient.PSMEventMessage_swigregister
PSMEventMessage_swigregister(PSMEventMessage)

class PSMServiceVersion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMServiceVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMServiceVersion, name)
    __repr__ = _swig_repr
    __swig_getmethods__["version_string"] = _PSMoveClient.PSMServiceVersion_version_string_get
    if _newclass:
        version_string = _swig_property(_PSMoveClient.PSMServiceVersion_version_string_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMServiceVersion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMServiceVersion
    __del__ = lambda self: None
PSMServiceVersion_swigregister = _PSMoveClient.PSMServiceVersion_swigregister
PSMServiceVersion_swigregister(PSMServiceVersion)

class PSMControllerList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMControllerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMControllerList, name)
    __repr__ = _swig_repr
    __swig_getmethods__["host_serial"] = _PSMoveClient.PSMControllerList_host_serial_get
    if _newclass:
        host_serial = _swig_property(_PSMoveClient.PSMControllerList_host_serial_get)
    __swig_getmethods__["controllers"] = _PSMoveClient.PSMControllerList_controllers_get
    if _newclass:
        controllers = _swig_property(_PSMoveClient.PSMControllerList_controllers_get)
    __swig_getmethods__["count"] = _PSMoveClient.PSMControllerList_count_get
    if _newclass:
        count = _swig_property(_PSMoveClient.PSMControllerList_count_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMControllerList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMControllerList
    __del__ = lambda self: None
PSMControllerList_swigregister = _PSMoveClient.PSMControllerList_swigregister
PSMControllerList_swigregister(PSMControllerList)

class PSMTrackerList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMTrackerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMTrackerList, name)
    __repr__ = _swig_repr
    __swig_getmethods__["trackers"] = _PSMoveClient.PSMTrackerList_trackers_get
    if _newclass:
        trackers = _swig_property(_PSMoveClient.PSMTrackerList_trackers_get)
    __swig_getmethods__["count"] = _PSMoveClient.PSMTrackerList_count_get
    if _newclass:
        count = _swig_property(_PSMoveClient.PSMTrackerList_count_get)
    __swig_getmethods__["global_forward_degrees"] = _PSMoveClient.PSMTrackerList_global_forward_degrees_get
    if _newclass:
        global_forward_degrees = _swig_property(_PSMoveClient.PSMTrackerList_global_forward_degrees_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMTrackerList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMTrackerList
    __del__ = lambda self: None
PSMTrackerList_swigregister = _PSMoveClient.PSMTrackerList_swigregister
PSMTrackerList_swigregister(PSMTrackerList)

class PSMHmdList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMHmdList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMHmdList, name)
    __repr__ = _swig_repr
    __swig_getmethods__["hmds"] = _PSMoveClient.PSMHmdList_hmds_get
    if _newclass:
        hmds = _swig_property(_PSMoveClient.PSMHmdList_hmds_get)
    __swig_getmethods__["count"] = _PSMoveClient.PSMHmdList_count_get
    if _newclass:
        count = _swig_property(_PSMoveClient.PSMHmdList_count_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMHmdList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMHmdList
    __del__ = lambda self: None
PSMHmdList_swigregister = _PSMoveClient.PSMHmdList_swigregister
PSMHmdList_swigregister(PSMHmdList)

class PSMTrackingSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMTrackingSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMTrackingSpace, name)
    __repr__ = _swig_repr
    __swig_getmethods__["global_forward_degrees"] = _PSMoveClient.PSMTrackingSpace_global_forward_degrees_get
    if _newclass:
        global_forward_degrees = _swig_property(_PSMoveClient.PSMTrackingSpace_global_forward_degrees_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMTrackingSpace()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMTrackingSpace
    __del__ = lambda self: None
PSMTrackingSpace_swigregister = _PSMoveClient.PSMTrackingSpace_swigregister
PSMTrackingSpace_swigregister(PSMTrackingSpace)

_responsePayloadType_Empty = _PSMoveClient._responsePayloadType_Empty
_responsePayloadType_ServiceVersion = _PSMoveClient._responsePayloadType_ServiceVersion
_responsePayloadType_ControllerList = _PSMoveClient._responsePayloadType_ControllerList
_responsePayloadType_TrackerList = _PSMoveClient._responsePayloadType_TrackerList
_responsePayloadType_TrackingSpace = _PSMoveClient._responsePayloadType_TrackingSpace
_responsePayloadType_HmdList = _PSMoveClient._responsePayloadType_HmdList
_responsePayloadType_Count = _PSMoveClient._responsePayloadType_Count
class PSMResponseMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMResponseMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMResponseMessage, name)
    __repr__ = _swig_repr
    __swig_getmethods__["request_id"] = _PSMoveClient.PSMResponseMessage_request_id_get
    if _newclass:
        request_id = _swig_property(_PSMoveClient.PSMResponseMessage_request_id_get)
    __swig_getmethods__["result_code"] = _PSMoveClient.PSMResponseMessage_result_code_get
    if _newclass:
        result_code = _swig_property(_PSMoveClient.PSMResponseMessage_result_code_get)
    __swig_getmethods__["opaque_request_handle"] = _PSMoveClient.PSMResponseMessage_opaque_request_handle_get
    if _newclass:
        opaque_request_handle = _swig_property(_PSMoveClient.PSMResponseMessage_opaque_request_handle_get)
    __swig_getmethods__["opaque_response_handle"] = _PSMoveClient.PSMResponseMessage_opaque_response_handle_get
    if _newclass:
        opaque_response_handle = _swig_property(_PSMoveClient.PSMResponseMessage_opaque_response_handle_get)
    __swig_getmethods__["payload"] = _PSMoveClient.PSMResponseMessage_payload_get
    if _newclass:
        payload = _swig_property(_PSMoveClient.PSMResponseMessage_payload_get)
    __swig_getmethods__["payload_type"] = _PSMoveClient.PSMResponseMessage_payload_type_get
    if _newclass:
        payload_type = _swig_property(_PSMoveClient.PSMResponseMessage_payload_type_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMResponseMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMResponseMessage
    __del__ = lambda self: None
PSMResponseMessage_swigregister = _PSMoveClient.PSMResponseMessage_swigregister
PSMResponseMessage_swigregister(PSMResponseMessage)

class PSMResponseMessage_payload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMResponseMessage_payload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMResponseMessage_payload, name)
    __repr__ = _swig_repr
    __swig_getmethods__["service_version"] = _PSMoveClient.PSMResponseMessage_payload_service_version_get
    if _newclass:
        service_version = _swig_property(_PSMoveClient.PSMResponseMessage_payload_service_version_get)
    __swig_getmethods__["controller_list"] = _PSMoveClient.PSMResponseMessage_payload_controller_list_get
    if _newclass:
        controller_list = _swig_property(_PSMoveClient.PSMResponseMessage_payload_controller_list_get)
    __swig_getmethods__["tracker_list"] = _PSMoveClient.PSMResponseMessage_payload_tracker_list_get
    if _newclass:
        tracker_list = _swig_property(_PSMoveClient.PSMResponseMessage_payload_tracker_list_get)
    __swig_getmethods__["hmd_list"] = _PSMoveClient.PSMResponseMessage_payload_hmd_list_get
    if _newclass:
        hmd_list = _swig_property(_PSMoveClient.PSMResponseMessage_payload_hmd_list_get)
    __swig_getmethods__["tracking_space"] = _PSMoveClient.PSMResponseMessage_payload_tracking_space_get
    if _newclass:
        tracking_space = _swig_property(_PSMoveClient.PSMResponseMessage_payload_tracking_space_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMResponseMessage_payload()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMResponseMessage_payload
    __del__ = lambda self: None
PSMResponseMessage_payload_swigregister = _PSMoveClient.PSMResponseMessage_payload_swigregister
PSMResponseMessage_payload_swigregister(PSMResponseMessage_payload)

_messagePayloadType_Event = _PSMoveClient._messagePayloadType_Event
_messagePayloadType_Response = _PSMoveClient._messagePayloadType_Response
_messagePayloadType_Count = _PSMoveClient._messagePayloadType_Count
class PSMMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMMessage, name)
    __repr__ = _swig_repr
    __swig_getmethods__["event_data"] = _PSMoveClient.PSMMessage_event_data_get
    if _newclass:
        event_data = _swig_property(_PSMoveClient.PSMMessage_event_data_get)
    __swig_getmethods__["response_data"] = _PSMoveClient.PSMMessage_response_data_get
    if _newclass:
        response_data = _swig_property(_PSMoveClient.PSMMessage_response_data_get)
    __swig_getmethods__["payload_type"] = _PSMoveClient.PSMMessage_payload_type_get
    if _newclass:
        payload_type = _swig_property(_PSMoveClient.PSMMessage_payload_type_get)

    def __init__(self):
        this = _PSMoveClient.new_PSMMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PSMoveClient.delete_PSMMessage
    __del__ = lambda self: None
PSMMessage_swigregister = _PSMoveClient.PSMMessage_swigregister
PSMMessage_swigregister(PSMMessage)


def PSM_Initialize(host, port, timeout_ms):
    return _PSMoveClient.PSM_Initialize(host, port, timeout_ms)
PSM_Initialize = _PSMoveClient.PSM_Initialize

def PSM_Shutdown():
    return _PSMoveClient.PSM_Shutdown()
PSM_Shutdown = _PSMoveClient.PSM_Shutdown

def PSM_InitializeAsync(host, port):
    return _PSMoveClient.PSM_InitializeAsync(host, port)
PSM_InitializeAsync = _PSMoveClient.PSM_InitializeAsync

def PSM_Update():
    return _PSMoveClient.PSM_Update()
PSM_Update = _PSMoveClient.PSM_Update

def PSM_UpdateNoPollMessages():
    return _PSMoveClient.PSM_UpdateNoPollMessages()
PSM_UpdateNoPollMessages = _PSMoveClient.PSM_UpdateNoPollMessages

def PSM_GetClientVersionString():
    return _PSMoveClient.PSM_GetClientVersionString()
PSM_GetClientVersionString = _PSMoveClient.PSM_GetClientVersionString

def PSM_GetIsInitialized():
    return _PSMoveClient.PSM_GetIsInitialized()
PSM_GetIsInitialized = _PSMoveClient.PSM_GetIsInitialized

def PSM_GetIsConnected():
    return _PSMoveClient.PSM_GetIsConnected()
PSM_GetIsConnected = _PSMoveClient.PSM_GetIsConnected

def PSM_HasConnectionStatusChanged():
    return _PSMoveClient.PSM_HasConnectionStatusChanged()
PSM_HasConnectionStatusChanged = _PSMoveClient.PSM_HasConnectionStatusChanged

def PSM_HasControllerListChanged():
    return _PSMoveClient.PSM_HasControllerListChanged()
PSM_HasControllerListChanged = _PSMoveClient.PSM_HasControllerListChanged

def PSM_HasTrackerListChanged():
    return _PSMoveClient.PSM_HasTrackerListChanged()
PSM_HasTrackerListChanged = _PSMoveClient.PSM_HasTrackerListChanged

def PSM_HasHMDListChanged():
    return _PSMoveClient.PSM_HasHMDListChanged()
PSM_HasHMDListChanged = _PSMoveClient.PSM_HasHMDListChanged

def PSM_WasSystemButtonPressed():
    return _PSMoveClient.PSM_WasSystemButtonPressed()
PSM_WasSystemButtonPressed = _PSMoveClient.PSM_WasSystemButtonPressed

def PSM_GetServiceVersionString(out_version_string, max_version_string, timeout_ms):
    return _PSMoveClient.PSM_GetServiceVersionString(out_version_string, max_version_string, timeout_ms)
PSM_GetServiceVersionString = _PSMoveClient.PSM_GetServiceVersionString

def PSM_GetServiceVersionStringAsync(out_request_id):
    return _PSMoveClient.PSM_GetServiceVersionStringAsync(out_request_id)
PSM_GetServiceVersionStringAsync = _PSMoveClient.PSM_GetServiceVersionStringAsync

def PSM_PollNextMessage(out_message):
    return _PSMoveClient.PSM_PollNextMessage(out_message)
PSM_PollNextMessage = _PSMoveClient.PSM_PollNextMessage

def PSM_SendOpaqueRequest(request_handle, out_request_id):
    return _PSMoveClient.PSM_SendOpaqueRequest(request_handle, out_request_id)
PSM_SendOpaqueRequest = _PSMoveClient.PSM_SendOpaqueRequest

def PSM_RegisterCallback(request_id, callback, callback_userdata):
    return _PSMoveClient.PSM_RegisterCallback(request_id, callback, callback_userdata)
PSM_RegisterCallback = _PSMoveClient.PSM_RegisterCallback

def PSM_CancelCallback(request_id):
    return _PSMoveClient.PSM_CancelCallback(request_id)
PSM_CancelCallback = _PSMoveClient.PSM_CancelCallback

def PSM_EatResponse(request_id):
    return _PSMoveClient.PSM_EatResponse(request_id)
PSM_EatResponse = _PSMoveClient.PSM_EatResponse

def PSM_GetController(controller_id):
    return _PSMoveClient.PSM_GetController(controller_id)
PSM_GetController = _PSMoveClient.PSM_GetController

def PSM_AllocateControllerListener(controller_id):
    return _PSMoveClient.PSM_AllocateControllerListener(controller_id)
PSM_AllocateControllerListener = _PSMoveClient.PSM_AllocateControllerListener

def PSM_FreeControllerListener(controller_id):
    return _PSMoveClient.PSM_FreeControllerListener(controller_id)
PSM_FreeControllerListener = _PSMoveClient.PSM_FreeControllerListener

def PSM_GetControllerList(out_controller_list, timeout_ms):
    return _PSMoveClient.PSM_GetControllerList(out_controller_list, timeout_ms)
PSM_GetControllerList = _PSMoveClient.PSM_GetControllerList

def PSM_StartControllerDataStream(controller_id, data_stream_flags, timeout_ms):
    return _PSMoveClient.PSM_StartControllerDataStream(controller_id, data_stream_flags, timeout_ms)
PSM_StartControllerDataStream = _PSMoveClient.PSM_StartControllerDataStream

def PSM_StopControllerDataStream(controller_id, timeout_ms):
    return _PSMoveClient.PSM_StopControllerDataStream(controller_id, timeout_ms)
PSM_StopControllerDataStream = _PSMoveClient.PSM_StopControllerDataStream

def PSM_SetControllerLEDTrackingColor(controller_id, tracking_color, timeout_ms):
    return _PSMoveClient.PSM_SetControllerLEDTrackingColor(controller_id, tracking_color, timeout_ms)
PSM_SetControllerLEDTrackingColor = _PSMoveClient.PSM_SetControllerLEDTrackingColor

def PSM_ResetControllerOrientation(controller_id, q_pose, timeout_ms):
    return _PSMoveClient.PSM_ResetControllerOrientation(controller_id, q_pose, timeout_ms)
PSM_ResetControllerOrientation = _PSMoveClient.PSM_ResetControllerOrientation

def PSM_SetControllerDataStreamTrackerIndex(controller_id, tracker_id, timeout_ms):
    return _PSMoveClient.PSM_SetControllerDataStreamTrackerIndex(controller_id, tracker_id, timeout_ms)
PSM_SetControllerDataStreamTrackerIndex = _PSMoveClient.PSM_SetControllerDataStreamTrackerIndex

def PSM_SetControllerHand(controller_id, hand, timeout_ms):
    return _PSMoveClient.PSM_SetControllerHand(controller_id, hand, timeout_ms)
PSM_SetControllerHand = _PSMoveClient.PSM_SetControllerHand

def PSM_GetControllerOrientation(controller_id, out_orientation):
    return _PSMoveClient.PSM_GetControllerOrientation(controller_id, out_orientation)
PSM_GetControllerOrientation = _PSMoveClient.PSM_GetControllerOrientation

def PSM_GetControllerPosition(controller_id, out_position):
    return _PSMoveClient.PSM_GetControllerPosition(controller_id, out_position)
PSM_GetControllerPosition = _PSMoveClient.PSM_GetControllerPosition

def PSM_GetControllerPose(controller_id, out_pose):
    return _PSMoveClient.PSM_GetControllerPose(controller_id, out_pose)
PSM_GetControllerPose = _PSMoveClient.PSM_GetControllerPose

def PSM_GetControllerRumble(controller_id, channel, out_rumble_fraction):
    return _PSMoveClient.PSM_GetControllerRumble(controller_id, channel, out_rumble_fraction)
PSM_GetControllerRumble = _PSMoveClient.PSM_GetControllerRumble

def PSM_GetIsControllerStable(controller_id, out_is_stable):
    return _PSMoveClient.PSM_GetIsControllerStable(controller_id, out_is_stable)
PSM_GetIsControllerStable = _PSMoveClient.PSM_GetIsControllerStable

def PSM_GetIsControllerTracking(controller_id, out_is_tracking):
    return _PSMoveClient.PSM_GetIsControllerTracking(controller_id, out_is_tracking)
PSM_GetIsControllerTracking = _PSMoveClient.PSM_GetIsControllerTracking

def PSM_GetControllerPixelLocationOnTracker(controller_id, out_tracker_id, out_location):
    return _PSMoveClient.PSM_GetControllerPixelLocationOnTracker(controller_id, out_tracker_id, out_location)
PSM_GetControllerPixelLocationOnTracker = _PSMoveClient.PSM_GetControllerPixelLocationOnTracker

def PSM_GetControllerPositionOnTracker(controller_id, out_tracker_id, outPosition):
    return _PSMoveClient.PSM_GetControllerPositionOnTracker(controller_id, out_tracker_id, outPosition)
PSM_GetControllerPositionOnTracker = _PSMoveClient.PSM_GetControllerPositionOnTracker

def PSM_GetControllerOrientationOnTracker(controller_id, out_tracker_id, outOrientation):
    return _PSMoveClient.PSM_GetControllerOrientationOnTracker(controller_id, out_tracker_id, outOrientation)
PSM_GetControllerOrientationOnTracker = _PSMoveClient.PSM_GetControllerOrientationOnTracker

def PSM_GetControllerProjectionOnTracker(controller_id, out_tracker_id, out_projection):
    return _PSMoveClient.PSM_GetControllerProjectionOnTracker(controller_id, out_tracker_id, out_projection)
PSM_GetControllerProjectionOnTracker = _PSMoveClient.PSM_GetControllerProjectionOnTracker

def PSM_SetControllerLEDOverrideColor(controller_id, r, g, b):
    return _PSMoveClient.PSM_SetControllerLEDOverrideColor(controller_id, r, g, b)
PSM_SetControllerLEDOverrideColor = _PSMoveClient.PSM_SetControllerLEDOverrideColor

def PSM_SetControllerRumble(controller_id, channel, rumble_fraction):
    return _PSMoveClient.PSM_SetControllerRumble(controller_id, channel, rumble_fraction)
PSM_SetControllerRumble = _PSMoveClient.PSM_SetControllerRumble

def PSM_GetControllerListAsync(out_request_id):
    return _PSMoveClient.PSM_GetControllerListAsync(out_request_id)
PSM_GetControllerListAsync = _PSMoveClient.PSM_GetControllerListAsync

def PSM_StartControllerDataStreamAsync(controller_id, data_stream_flags, out_request_id):
    return _PSMoveClient.PSM_StartControllerDataStreamAsync(controller_id, data_stream_flags, out_request_id)
PSM_StartControllerDataStreamAsync = _PSMoveClient.PSM_StartControllerDataStreamAsync

def PSM_StopControllerDataStreamAsync(controller_id, out_request_id):
    return _PSMoveClient.PSM_StopControllerDataStreamAsync(controller_id, out_request_id)
PSM_StopControllerDataStreamAsync = _PSMoveClient.PSM_StopControllerDataStreamAsync

def PSM_SetControllerLEDColorAsync(controller_id, tracking_color, out_request_id):
    return _PSMoveClient.PSM_SetControllerLEDColorAsync(controller_id, tracking_color, out_request_id)
PSM_SetControllerLEDColorAsync = _PSMoveClient.PSM_SetControllerLEDColorAsync

def PSM_ResetControllerOrientationAsync(controller_id, q_pose, out_request_id):
    return _PSMoveClient.PSM_ResetControllerOrientationAsync(controller_id, q_pose, out_request_id)
PSM_ResetControllerOrientationAsync = _PSMoveClient.PSM_ResetControllerOrientationAsync

def PSM_SetControllerDataStreamTrackerIndexAsync(controller_id, tracker_id, out_request_id):
    return _PSMoveClient.PSM_SetControllerDataStreamTrackerIndexAsync(controller_id, tracker_id, out_request_id)
PSM_SetControllerDataStreamTrackerIndexAsync = _PSMoveClient.PSM_SetControllerDataStreamTrackerIndexAsync

def PSM_SetControllerHandAsync(controller_id, hand, out_request_id):
    return _PSMoveClient.PSM_SetControllerHandAsync(controller_id, hand, out_request_id)
PSM_SetControllerHandAsync = _PSMoveClient.PSM_SetControllerHandAsync

def PSM_GetTracker(tracker_id):
    return _PSMoveClient.PSM_GetTracker(tracker_id)
PSM_GetTracker = _PSMoveClient.PSM_GetTracker

def PSM_AllocateTrackerListener(tracker_id, tracker_info):
    return _PSMoveClient.PSM_AllocateTrackerListener(tracker_id, tracker_info)
PSM_AllocateTrackerListener = _PSMoveClient.PSM_AllocateTrackerListener

def PSM_FreeTrackerListener(controller_id):
    return _PSMoveClient.PSM_FreeTrackerListener(controller_id)
PSM_FreeTrackerListener = _PSMoveClient.PSM_FreeTrackerListener

def PSM_GetTrackerIntrinsicMatrix(tracker_id, out_matrix):
    return _PSMoveClient.PSM_GetTrackerIntrinsicMatrix(tracker_id, out_matrix)
PSM_GetTrackerIntrinsicMatrix = _PSMoveClient.PSM_GetTrackerIntrinsicMatrix

def PSM_GetTrackerList(out_tracker_list, timeout_ms):
    return _PSMoveClient.PSM_GetTrackerList(out_tracker_list, timeout_ms)
PSM_GetTrackerList = _PSMoveClient.PSM_GetTrackerList

def PSM_StartTrackerDataStream(tracker_id, timeout_ms):
    return _PSMoveClient.PSM_StartTrackerDataStream(tracker_id, timeout_ms)
PSM_StartTrackerDataStream = _PSMoveClient.PSM_StartTrackerDataStream

def PSM_StopTrackerDataStream(tracker_id, timeout_ms):
    return _PSMoveClient.PSM_StopTrackerDataStream(tracker_id, timeout_ms)
PSM_StopTrackerDataStream = _PSMoveClient.PSM_StopTrackerDataStream

def PSM_GetTrackingSpaceSettings(out_tracking_space, timeout_ms):
    return _PSMoveClient.PSM_GetTrackingSpaceSettings(out_tracking_space, timeout_ms)
PSM_GetTrackingSpaceSettings = _PSMoveClient.PSM_GetTrackingSpaceSettings

def PSM_OpenTrackerVideoStream(tracker_id):
    return _PSMoveClient.PSM_OpenTrackerVideoStream(tracker_id)
PSM_OpenTrackerVideoStream = _PSMoveClient.PSM_OpenTrackerVideoStream

def PSM_PollTrackerVideoStream(tracker_id):
    return _PSMoveClient.PSM_PollTrackerVideoStream(tracker_id)
PSM_PollTrackerVideoStream = _PSMoveClient.PSM_PollTrackerVideoStream

def PSM_CloseTrackerVideoStream(tracker_id):
    return _PSMoveClient.PSM_CloseTrackerVideoStream(tracker_id)
PSM_CloseTrackerVideoStream = _PSMoveClient.PSM_CloseTrackerVideoStream

def PSM_GetTrackerVideoFrameBuffer(tracker_id, out_buffer):
    return _PSMoveClient.PSM_GetTrackerVideoFrameBuffer(tracker_id, out_buffer)
PSM_GetTrackerVideoFrameBuffer = _PSMoveClient.PSM_GetTrackerVideoFrameBuffer

def PSM_GetTrackerFrustum(tracker_id, out_frustum):
    return _PSMoveClient.PSM_GetTrackerFrustum(tracker_id, out_frustum)
PSM_GetTrackerFrustum = _PSMoveClient.PSM_GetTrackerFrustum

def PSM_GetTrackerListAsync(out_request_id):
    return _PSMoveClient.PSM_GetTrackerListAsync(out_request_id)
PSM_GetTrackerListAsync = _PSMoveClient.PSM_GetTrackerListAsync

def PSM_StartTrackerDataStreamAsync(tracker_id, out_request_id):
    return _PSMoveClient.PSM_StartTrackerDataStreamAsync(tracker_id, out_request_id)
PSM_StartTrackerDataStreamAsync = _PSMoveClient.PSM_StartTrackerDataStreamAsync

def PSM_StopTrackerDataStreamAsync(tracker_id, out_request_id):
    return _PSMoveClient.PSM_StopTrackerDataStreamAsync(tracker_id, out_request_id)
PSM_StopTrackerDataStreamAsync = _PSMoveClient.PSM_StopTrackerDataStreamAsync

def PSM_GetTrackingSpaceSettingsAsync(out_request_id):
    return _PSMoveClient.PSM_GetTrackingSpaceSettingsAsync(out_request_id)
PSM_GetTrackingSpaceSettingsAsync = _PSMoveClient.PSM_GetTrackingSpaceSettingsAsync

def PSM_GetHmd(hmd_id):
    return _PSMoveClient.PSM_GetHmd(hmd_id)
PSM_GetHmd = _PSMoveClient.PSM_GetHmd

def PSM_AllocateHmdListener(hmd_id):
    return _PSMoveClient.PSM_AllocateHmdListener(hmd_id)
PSM_AllocateHmdListener = _PSMoveClient.PSM_AllocateHmdListener

def PSM_FreeHmdListener(hmd_id):
    return _PSMoveClient.PSM_FreeHmdListener(hmd_id)
PSM_FreeHmdListener = _PSMoveClient.PSM_FreeHmdListener

def PSM_GetHmdOrientation(hmd_id, out_orientation):
    return _PSMoveClient.PSM_GetHmdOrientation(hmd_id, out_orientation)
PSM_GetHmdOrientation = _PSMoveClient.PSM_GetHmdOrientation

def PSM_GetHmdPosition(hmd_id, out_position):
    return _PSMoveClient.PSM_GetHmdPosition(hmd_id, out_position)
PSM_GetHmdPosition = _PSMoveClient.PSM_GetHmdPosition

def PSM_GetHmdPose(hmd_id, out_pose):
    return _PSMoveClient.PSM_GetHmdPose(hmd_id, out_pose)
PSM_GetHmdPose = _PSMoveClient.PSM_GetHmdPose

def PSM_GetIsHmdStable(hmd_id, out_is_stable):
    return _PSMoveClient.PSM_GetIsHmdStable(hmd_id, out_is_stable)
PSM_GetIsHmdStable = _PSMoveClient.PSM_GetIsHmdStable

def PSM_GetIsHmdTracking(hmd_id, out_is_tracking):
    return _PSMoveClient.PSM_GetIsHmdTracking(hmd_id, out_is_tracking)
PSM_GetIsHmdTracking = _PSMoveClient.PSM_GetIsHmdTracking

def PSM_GetHmdPixelLocationOnTracker(hmd_id, out_tracker_id, out_location):
    return _PSMoveClient.PSM_GetHmdPixelLocationOnTracker(hmd_id, out_tracker_id, out_location)
PSM_GetHmdPixelLocationOnTracker = _PSMoveClient.PSM_GetHmdPixelLocationOnTracker

def PSM_GetHmdPositionOnTracker(hmd_id, out_tracker_id, out_position):
    return _PSMoveClient.PSM_GetHmdPositionOnTracker(hmd_id, out_tracker_id, out_position)
PSM_GetHmdPositionOnTracker = _PSMoveClient.PSM_GetHmdPositionOnTracker

def PSM_GetHmdOrientationOnTracker(hmd_id, out_tracker_id, out_orientation):
    return _PSMoveClient.PSM_GetHmdOrientationOnTracker(hmd_id, out_tracker_id, out_orientation)
PSM_GetHmdOrientationOnTracker = _PSMoveClient.PSM_GetHmdOrientationOnTracker

def PSM_GetHmdProjectionOnTracker(hmd_id, out_tracker_id, out_projection):
    return _PSMoveClient.PSM_GetHmdProjectionOnTracker(hmd_id, out_tracker_id, out_projection)
PSM_GetHmdProjectionOnTracker = _PSMoveClient.PSM_GetHmdProjectionOnTracker

def PSM_GetHmdList(out_hmd_list, timeout_ms):
    return _PSMoveClient.PSM_GetHmdList(out_hmd_list, timeout_ms)
PSM_GetHmdList = _PSMoveClient.PSM_GetHmdList

def PSM_StartHmdDataStream(hmd_id, data_stream_flags, timeout_ms):
    return _PSMoveClient.PSM_StartHmdDataStream(hmd_id, data_stream_flags, timeout_ms)
PSM_StartHmdDataStream = _PSMoveClient.PSM_StartHmdDataStream

def PSM_StopHmdDataStream(hmd_id, timeout_ms):
    return _PSMoveClient.PSM_StopHmdDataStream(hmd_id, timeout_ms)
PSM_StopHmdDataStream = _PSMoveClient.PSM_StopHmdDataStream

def PSM_SetHmdDataStreamTrackerIndex(hmd_id, tracker_id, timeout_ms):
    return _PSMoveClient.PSM_SetHmdDataStreamTrackerIndex(hmd_id, tracker_id, timeout_ms)
PSM_SetHmdDataStreamTrackerIndex = _PSMoveClient.PSM_SetHmdDataStreamTrackerIndex

def PSM_GetHmdListAsync(out_request_id):
    return _PSMoveClient.PSM_GetHmdListAsync(out_request_id)
PSM_GetHmdListAsync = _PSMoveClient.PSM_GetHmdListAsync

def PSM_StartHmdDataStreamAsync(hmd_id, data_stream_flags, out_request_id):
    return _PSMoveClient.PSM_StartHmdDataStreamAsync(hmd_id, data_stream_flags, out_request_id)
PSM_StartHmdDataStreamAsync = _PSMoveClient.PSM_StartHmdDataStreamAsync

def PSM_StopHmdDataStreamAsync(hmd_id, out_request_id):
    return _PSMoveClient.PSM_StopHmdDataStreamAsync(hmd_id, out_request_id)
PSM_StopHmdDataStreamAsync = _PSMoveClient.PSM_StopHmdDataStreamAsync

def PSM_SetHmdDataStreamTrackerIndexAsync(hmd_id, tracker_id, out_request_id):
    return _PSMoveClient.PSM_SetHmdDataStreamTrackerIndexAsync(hmd_id, tracker_id, out_request_id)
PSM_SetHmdDataStreamTrackerIndexAsync = _PSMoveClient.PSM_SetHmdDataStreamTrackerIndexAsync

def PSM_TrackingProjectionGetArea(proj):
    return _PSMoveClient.PSM_TrackingProjectionGetArea(proj)
PSM_TrackingProjectionGetArea = _PSMoveClient.PSM_TrackingProjectionGetArea
# This file is compatible with both classic and new-style classes.


